---
title: "The Synthetic Control Method"
date: today
author:
  - name: "Jared Greathouse"
    url: "https://jgreathouse9.github.io"
format:
  revealjs:
    theme: simple
    slide-number: true
    transition: fade
    scrollable: true
    background-color: "#EAF7F1"
highlight-style: github
---

## Synthetic Controls

This is the lecture on synthetic control methodologies (SCM). SCM is a quasi-experimental method we can use to estimate the causal impact of policies, marketing campaigns, or other treatments we care about.

## What Is An Average?

Before we cover SCM, we need to be very clear about what an average is.

::: {.panel-tabset}

### Scalars

- With a finite set of scalars  $S = \{x_1, x_2, \dots, x_n\} \subset \mathbb{R}$, the arithmetic mean is:  

$$
\bar{x} = \frac{1}{n} \sum_{x \in S} x
= \tfrac{x_1 + x_2 + \cdots + x_n}{n}.
$$

- For example, say you have 12 apples and your friend has 18. This can be called set $A = \{12, 18\} \subset \mathbb{R}$:

$$
15 = \bar{x} = \frac{1}{2} \sum_{x \in \{12,18\}} x
= (\tfrac{1}{2} \cdot 12) + (\tfrac{1}{2} \cdot 18)
= \frac{12 + 18}{2}.
$$

On average, you have 15 apples.

---

### Vectors

- We can write the same example as a row vector:

$$
\mathbf{x} = 
\begin{bmatrix} 12 & 18 \end{bmatrix} 
\in \mathbb{R}^{1 \times 2},
$$

where each entry corresponds to a person’s apples.  

- The weights are one divided by the number of people. Since it's just you and your friend, you both get the same weight:

$$
\mathbf{w} = 
\begin{bmatrix} \frac{1}{2} \\ \frac{1}{2} \end{bmatrix} 
\in \mathbb{R}^{2 \times 1}.
$$

- Then the average is:

$$
\bar{x} = \mathbf{x}\mathbf{w} 
= 
\begin{bmatrix} 12 & 18 \end{bmatrix}
\begin{bmatrix} \tfrac{1}{2} \\[6pt] \tfrac{1}{2} \end{bmatrix}
= 
\begin{bmatrix} 12 \cdot \tfrac{1}{2} & \; 18 \cdot \tfrac{1}{2} \end{bmatrix}
= 6 + 9 = 15.
$$

See? We still have 15 apples, on averge.

---

### Matrices

- Let’s extend this to multiple time periods. Suppose today you have 12 apples and tomorrow 30, and your friend has 18 today and 22 tomorrow. We can organize this into a matrix, where each row is a time period and each column is a person. You are column one, and your friend is column 2:

$$
\mathbf{Y} =
\begin{bmatrix}
12 & 18 \\ 
30 & 22
\end{bmatrix} 
\in \mathbb{R}^{2 \times 2}.
$$

- Now we want the average over time. Using the same weights as before (becasue again, there are two people/columns, remember?), the average number of apples held per time period is:

$$
\bar{\mathbf{x}} = \mathbf{Y} \mathbf{w}
= 
\begin{bmatrix}
12 & 18 \\ 
30 & 22
\end{bmatrix} 
\begin{bmatrix} \frac{1}{2} \\ \frac{1}{2} \end{bmatrix} 
=
\begin{bmatrix}
15 \\ 
26
\end{bmatrix}.
$$

So on average, you and your friend have 15 apples today and 26 apples tomorrow. This idea can be generalized to anything, to GDPs, to incomes, and so on.

:::


## What Are We Weighting For? Introducing Weighted Averages

::: {.panel-tabset}

### Simple Averages

You are at a bar with your friend. You earn $60k$/year. Your friend earns $70k$/year. The simple average of your incomes is:

$$
\mathbf{x} = \begin{bmatrix} 60 & 70 \end{bmatrix}, \quad
\mathbf{w} = \begin{bmatrix} \frac{1}{2} \\[1mm] \frac{1}{2} \end{bmatrix}
$$

$$
\bar{x} = \mathbf{x} \mathbf{w} 
= \begin{bmatrix} 60 & 70 \end{bmatrix} 
\begin{bmatrix} \frac{1}{2} \\[1mm] \frac{1}{2} \end{bmatrix} 
= \frac{1}{2}\cdot 60 + \frac{1}{2}\cdot 70 
= 65 \text{ (k/year)}
$$

Now, suddenly Bill Gates walks in, with a net worth of $107$ billion/year. Taking the simple average of all three income levels:  

$$
\mathbf{x} = \begin{bmatrix} 60 & 70 & 107{,}000{,}000{,}000 \end{bmatrix}, \quad
\mathbf{w} = \begin{bmatrix} \frac{1}{3} \\[1mm] \frac{1}{3} \\[1mm] \frac{1}{3} \end{bmatrix}
$$

$$
\bar{x} = \mathbf{x} \mathbf{w} 
= \frac{1}{3}\cdot 60 + \frac{1}{3}\cdot 70 + \frac{1}{3}\cdot 107{,}000{,}000{,}000
\approx 35.7 \text{ billion/year}
$$

Clearly, treating Bill Gates the same as the others skews the average.

- If the bartender next day bragged about earning 50k that night, we'd say "It's not that you earned 50k organically, a wealthy dude happened to be there that night, we can't use this as evidence that your business is booming." In other words, we all would likely agree that if we want to calculate an average of incomes for the bar, Bill should likely get much less weight than the other patrons.

---

### Weighted Average

Instead of treating Bill as equal to you two, we can give each person a "weight" $w_i$ to decide how much they count in the average. This number is simply the fraction part from the summation on the first slide:  

$$
\bar{x}_{\text{weighted}} = \sum_{i=1}^{n} w_i x_i, \quad \sum_{i=1}^{n} w_i = 1,
$$

Here, we compute a weighted average that between you, your friend, and Bill, who now can get a tiny weight. You and your friend get larger weights, giving a more reasonable "average bar income."  

---

### Weighted Average Cont.

Suppose we only care about you and your friend, and ignore Bill Gates (weight = 0):

$$
\mathbf{x} = \begin{bmatrix} 60 & 70 & 107{,}000{,}000{,}000 \end{bmatrix}, \quad
\mathbf{w} = \begin{bmatrix} 0.5 \\[1mm] 0.5 \\[1mm] 0 \end{bmatrix}
$$

Then the weighted average is:

$$
\bar{x} = \mathbf{x} \mathbf{w} 
= 0.5\cdot 60 + 0.5\cdot 70 + 0 \cdot 107{,}000{,}000{,}000
= 65 \text{ (k/year)}
$$

See how the average is as it was at first when it was just you and your friend? Bill is clearly not representative of a bar or even a country. Giving him as much weight as regular humans does not make sense.

:::


## How to Choose the Weights?

- The issue with the above is that the weights we used are kind of arbitrary. There's no reason that the weights for us both need to be 0.5. Maybe you could have gotten a value of 0.1 and your friend 0.9. In other words, weights are rarely given to us in real life. To use the idea of a weighted average for estimating policy impacts, we'll need to formalize this a little more.

- Suppose we have one unit that is exposed to  terrorism in 1975, and another set of 16 units that are not exposed. We wish to know the effect of terrorism on the GDP per capita.

- Collecting data on their GDPs over the pre and post terrorism periods, we wish to estimate the counterfactual for the Basque Country as a weighted average of control units. Below we have plotted the Basque Country's GDP, and the GDPs of the 16 other untreated regions.

```{python}

import cvxpy as cp
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from mlsynth.utils.datautils import dataprep

# --- Load and preprocess data ---
url = "https://raw.githubusercontent.com/jgreathouse9/mlsynth/refs/heads/main/basedata/basque_data.csv"
data = pd.read_csv(url)
prepped_data = dataprep(data, "regionname", "year", "gdpcap", "Terrorism")

y, Y0, T0, time = prepped_data["y"], prepped_data["donor_matrix"], prepped_data["pre_periods"], prepped_data['time_labels']


# --- Create figure with 2 subplots ---
fig, axes = plt.subplots(1, 2, figsize=(14, 5), sharey=True)

# --- Left subplot: observed Basque only ---
axes[0].plot(time, y, color='black', label='Basque')
axes[0].set_title("Observed Basque GDP")
axes[0].set_xlabel("Year")
axes[0].set_ylabel("GDP")
axes[0].axvline(x=time[T0], color='red', linestyle='--', label='Terrorism')
axes[0].legend()

# --- Right subplot: observed Basque + donor units ---
# Plot all donors as thin grey lines
for j in range(Y0.shape[1]):
    axes[1].plot(time, Y0[:, j], color='grey', linewidth=0.8, alpha=0.7)

# Plot Basque on top
axes[1].plot(time, y, color='black', label='Basque')
axes[1].set_title("Basque vs Donor Units")
axes[1].set_xlabel("Year")
axes[1].axvline(x=time[T0], color='red', linestyle='--', label='Terrorism')
axes[1].legend()

plt.tight_layout()
plt.show()

```


## Using Least Squares

But how do we know how much weight a unit should get? One way to do this is to use linear regression. In linear regression with multiple variables, we get a list of coefficients returned to us that we can use as weights for our controlo group.

::: {.panel-tabset}

### Notation

- $\mathbf{y}_1 \in \mathbb{R}^{T}$: a column vector of outcomes (GDP per capita) for the treated unit (Basque Country) over $T$ time periods, where each row is one GDP value 
- $\mathbf{Y}_0 \in \mathbb{R}^{T \times J}$: donor matrix; each column is a control unit, each row is a time period ($J=16$ control units)  
- $\mathbf{w} \in \mathbb{R}^{J}$: vector of weights indicating how much each control unit column contributes to the weighted average version of the Basque Country  

### OLS Problem

The weights that minimize the pre-intervention difference are found by solving:

$$
\mathbf{w}^{\ast} = \underset{\mathbf{w} \in \mathbb{R}^J}{\operatorname*{argmin}} \; \| \mathbf{y}_1 - \mathbf{Y}_0 \mathbf{w} \|_2^2
$$

In Stata this would just be `reg y Donor1, Donor2-DonorN if year < 1975`, where the dependent variable is the GDP for the Basque Country and the independent variables are the GDP values of the untreated units.

Here, the OLS coefficients are our weights. These coefficients minimize the differnce between the weighted average and the treated unit as much as possible.

### Interpretation

- Once we have $\mathbf{w}^{\ast}$, we can compute the weighted average of controls:

$$
\hat{y}_1 = \mathbf{Y}_0 \mathbf{w}^{\ast}
$$

So to be clear, we multiply all of the values for a control unit by its regression coefficient, and we add up those values.


### Treatment Effect

The average treatment effect on the treated can be expressed as the mean difference between the observed outcomes and the weighted average in the post-intervention period:

$$
\text{ATT} = \frac{1}{T - T_0} \sum_{t=T_0+1}^{T} \left( y_{1t} - \hat{y}_{1t} \right)
$$

- $T_0$ is the last pre-intervention period  
- $y_{1t}$ is the observed outcome of the treated unit at time $t$  
- $\hat{y}_{1t}$ is the synthetic prediction at time $t$ 

:::

---

## Least Squares Cont.

::: {.panel-tabset}

### Our Weights

Here are the weights OLS returns to us.

```{python}
import cvxpy as cp
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
from mlsynth.utils.datautils import dataprep
from IPython.display import display, Markdown

# --- Load and preprocess data ---
url = "https://raw.githubusercontent.com/jgreathouse9/mlsynth/refs/heads/main/basedata/basque_data.csv"
data = pd.read_csv(url)
prepped_data = dataprep(data, "regionname", "year", "gdpcap", "Terrorism")

y, Y0, T0, time = prepped_data["y"], prepped_data["donor_matrix"], prepped_data["pre_periods"], prepped_data['time_labels']

# --- Define CVXPY variable for donor weights ---
J = Y0.shape[1]
w = cp.Variable(J)

# --- Define unconstrained OLS problem on pre-intervention ---
objective = cp.Minimize(cp.sum_squares(y[:T0] - Y0[:T0, :] @ w))
problem = cp.Problem(objective)
problem.solve()

# --- Extract weights ---
weights = w.value

# --- Predict outcomes using weights ---
y_pred = Y0 @ weights

# --- Compute ATT (mean post-treatment difference) ---
att = np.mean(y[T0:] - y_pred[T0:])

# --- Get donor names ---
donor_names = prepped_data['donor_names']

# --- Build DataFrame ---
weights_df = pd.DataFrame(weights, index=donor_names, columns=["Weight"])

md_table = weights_df.to_markdown(index=True)

display(Markdown(md_table))
```

We can see that everybody gets weight. Some positive, some negative. It is kind of unclear who matters most to the Basque Country's weighted average.

### Plotting

Here is our prediction using OLS. Unfortunately, while OLS fits very well to the Basque Country before terrorism happened, it has a weird zig-zag-y prediction after the treatment happens. We can see that the prediction line for the Basque country suggests that its economy would have fallen off a cliff, had terrorism **not** happened, in other words, terrorism was great for business to the tune of 1500 dollars per person... This does not seem like a sensible finding substantively, or a very reasonable prediciton.

```{python}
# --- Plot results ---
plt.figure(figsize=(10,6))
plt.plot(time, y, label="Basque (Observed)", color='black')
plt.plot(time, y_pred, label="Synthetic (OLS)", color='blue', linestyle='--')
plt.axvline(x=time[T0], color='red', linestyle='-', label='Terrorism')
plt.xlabel("Year")
plt.ylabel("GDP")
plt.title(f"Effect of Terrorism in the Basque Country (ATT = {att:.3f})")
plt.legend()
plt.show()
```

:::



## How To Change The Weights

What if we could change the weights somehow?


## Example Plot


```{python}

##| echo: false
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.animation import FuncAnimation, PillowWriter
import pandas as pd
from mlsynth.utils.datautils import dataprep

# --- Load and preprocess data ---
url = "https://raw.githubusercontent.com/jgreathouse9/mlsynth/refs/heads/main/basedata/basque_data.csv"
data = pd.read_csv(url)
prepped_data = dataprep(data, "regionname", "year", "gdpcap", "Terrorism")
Ywide_data = prepped_data["Ywide"]

y = Ywide_data["Basque"].values
Y0 = Ywide_data[["Cataluna", "Madrid (Comunidad De)"]].values

# --- Weights ---
w_final = np.array([0.85, 0.15])
w_start = np.array([0.1, 0.9])
steps = 50
weights_history = np.array([w_start + (w_final - w_start) * t/(steps-1) for t in range(steps)])

# --- Figure setup ---
fig, ax = plt.subplots(figsize=(8, 4))
line_y, = ax.plot(y, label="Treated (Basque)", color="red", linewidth=2)
line_hatY, = ax.plot(w_start[0]*Y0[:,0] + w_start[1]*Y0[:,1], 
                     label="Weighted combo", color="purple", linestyle="--")
line_cataluna, = ax.plot(Y0[:,0], label="Cataluna", color="green", alpha=0.5)
line_madrid, = ax.plot(Y0[:,1], label="Madrid", color="blue", alpha=0.5)

ax.legend()
ax.set_ylim(y.min() - 1, y.max() + 1)

# --- Animation function ---
def update(frame):
    w_curr = weights_history[frame]
    line_hatY.set_ydata(w_curr[0]*Y0[:,0] + w_curr[1]*Y0[:,1])
    
    if frame == steps - 1:
        line_cataluna.set_visible(False)
        line_madrid.set_visible(False)
        ax.set_title(f"Final SCM: w_Cataluna={w_curr[0]:.2f}, w_Madrid={w_curr[1]:.2f}")
    else:
        ax.set_title(f"Frame {frame+1}: w_Cataluna={w_curr[0]:.2f}, w_Madrid={w_curr[1]:.2f}")
    
    return line_hatY, line_cataluna, line_madrid

# --- Animate with repeated final frame ---
extra_frames = 30  # ~3 seconds at 10 fps
all_frames = list(range(steps)) + [steps-1]*extra_frames

ani = FuncAnimation(fig, update, frames=all_frames, blit=False)
ani.save("scm_weighted_combo.gif", writer=PillowWriter(fps=10))

plt.close(fig)


```

![SCM Weighted Combo](scm_weighted_combo.gif)

