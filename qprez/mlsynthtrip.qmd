---
title: "No Layovers, No Reservations: Productionizing Synthetic Controls for Tripadvisor Using [mlsynth](https://jgreathouse9.github.io/mlsynth/webdir/mlsynthlanding.html)"
author:
  - name: "Jared Greathouse"
    url: "https://jgreathouse9.github.io"
date: today
format:
  revealjs:
    theme: simple
    slide-number: true
    transition: fade
    scrollable: true
    footer: "Tripadvisor Â· mlsynth"
    background-color: "#EAF7F1"
highlight-style: github
---

## Executive Summary

- **The problem**: Synthetic Control Methods (SCMs) are critical for Tripadvisorâ€™s geo-testing and policy evaluation but their deployment into production is slowed by technical debt:
  - Fragmented libraries across R or Python and
  - Inconsistent syntax and manual processes mean
  - Using SCM is not production-ready for scalable workflows.

- **The solution**: `mlsynth` â€” a lightweight Python library unifying over 20 SCMs with one singular syntax. With `mlsynth`, analysts may plug and play different SCMs quicker than they could with any other open source package.

- **The impact**:
  - Analysts may multiple SCMs in a few minutes with no change to their data and small changes to syntax.
  - Seamlessly integrate into CI/CD pipelines for automated geo-testing
  - Therefore, insights for ad campaigns and tourism policies are delivered faster.

- **Tripadvisor benefit**: Transition from R to Python, aligning with your team's expertise and production needs.

---

::: {.panel-tabset}

## What Are SCMs?

Synthetic Control Methods (SCMs) estimate causal effects by creating a weighted average of untreated units, ideal for:

- Geo-testing ad campaigns across markets

- Evaluating local/national tourism policies (e.g., pricing, regulations)

- The econometrics literature in recent years has seen a variety of SCM advances, many of which use machine-learning methods.

**Tripadvisor use case**: Measure the impact of marketing campaigns or local policy changes.

## Practical Problems

- However, several recent SCM advances that Tripadvisor may benefit from have non-trivial startup costs to using them effectively.

- The first cost is purely software: not all SCMs are offered in one software. Furthermore, not all software is free.

- This makes it difficult to test different SCMs in a pipeline, especially given that other existing libraries (e.g., `pysoncon`, `tidysynth`, `augsynth`) differ in terms of data input expectations, options, and dependencies.


| Estimator | Language | Challenges |
|-----------|----------|------------|
| [Forward DID](https://doi.org/10.1287/mksc.2022.0212) | R | Free, but requires extensive user input |
| [Forward SCM](https://doi.org/10.1016/j.econlet.2024.111976) | Stata | Not free, not streamlined |
| [Two-Step SCM](https://doi.org/10.1287/mnsc.2023.4878) | Matlab | Not free, not streamlined |
| [Robust PCA Synth](https://academicworks.cuny.edu/gc_etds/4984/) | R + Python | Requires two languages |

:::

---

## Practical Problems cont.

Beyond simple software constraints, SCM tools often fail to:

- Support multiple methods in one workflow

- Provide automated diagnostics or effect-size statistics

- Facilitate easy comparison between methods

**Tripadvisor impact**: Manual/ad-hoc processes in Python/R slow down the implementation of SCMs for business-critical use cases.

---

## Practical Solutions

A streamlined SCM workflow for Tripadvisor should include:

- **Input**: A simple table with unit, time, treatment, and outcome
- **Method**: A single `.fit()` call
- **Output**: Effect estimates + diagnostics (e.g., fit quality, robustness)

**Tripadvisor benefit**: Enables rapid geo-testing across markets and policy evaluations with consistent, automated results.

---

## The Solution is `mlsynth`

`mlsynth` is a lightweight Python library which:

- Unifies multiple SCMs under one consistent API

- Integrates seamlessly into GitHub Actions or CI/CD pipelines for automated analyses

**Result**: Tripadvisor's analysts may focus on insights without wrestling with software logistics.

---

## Why use `mlsynth`?

- **For Tripadvisorâ€™s analysts**:
  - Quick onboarding with one syntax
  - Extensible design to add new and bespoke SCMs
  - Transparent results for easy validation
- **For Tripadvisorâ€™s organization**:
  - Production-ready workflows for geo-testing
  - Faster analysis, reducing campaign optimization time
  - Lower technical debt by eliminating R dependencies
- **For Tripadvisorâ€™s leadership**:
  - Insights are delivered faster
  - Reduced friction from streamlined tools and automation

---

## Empirical Example: [Barcelona Hotel Moratorium](https://doi.org/10.1080/13504851.2021.1927958)

- **Intervention**: City-wide hotel building moratorium (July 2015)
- **Outcome**: Normalized hotel prices (anonymized, from Booking.com)
- **Control Units**: 83 cities (16 Mediterranean)
- **Time**: Weekly Data, January 2011 to  late 2017.
- **Findings**: We find the moratorium increase hotel prices by roughly 12 percent.

---

## Using `mlsynth`

This chart shows the hotel building moratorium increased the prices of hotel rooms by ~12%.

```{python}

#| echo: False

import pandas as pd
from mlsynth import FSCM, CLUSTERSC, PDA
import plotly.graph_objects as go

# Load public tourism dataset
url = "https://raw.githubusercontent.com/jgreathouse9/GSUmetricspolicy/refs/heads/main/data/RawData/hotelex.csv"
data = pd.read_csv(url)

# Configure inputs (unit, time, treatment, outcome)
config = {
    "df": data,
    "outcome": "indexed_price",
    "treat": "treat",
    "unitid": "fullname",
    "time": "time",
    "display_graphs": False
}

# Fit Forward SCM
arco = FSCM(config).fit()
y_obs = arco.sub_method_results['FSCM'].time_series.observed_outcome
y_FSCM = arco.sub_method_results['FSCM'].time_series.counterfactual_outcome.flatten()
T0 = arco.raw_results['Fit']['Pre-Periods']

# Fit PDA (L2 method)
config_pda = dict(config)
config_pda["method"] = "l2"
l2pda = PDA(config_pda).fit()
y_l2relaxed = l2pda.time_series.model_extra['synthetic_outcome']

# Fit Robust SCM
config_RSC = dict(config)
config_RSC["method"], config_RSC["cluster"] = "PCR", False
RSC = CLUSTERSC(config_RSC).fit()
y_RSC = RSC.sub_method_results['PCR'].time_series.counterfactual_outcome.flatten()

# Create Plotly figure
fig = go.Figure()

# Add observed prices
fig.add_trace(go.Scatter(
    x=list(range(len(y_obs))),
    y=y_obs,
    mode='lines',
    name='Barcelona (Observed)',
    line=dict(color='#000000', width=2.5)
))

# Add counterfactuals
fig.add_trace(go.Scatter(
    x=list(range(len(y_FSCM))),
    y=y_FSCM,
    mode='lines',
    name='Forward SCM',
    line=dict(color='#1E90FF', width=1.5)
))
fig.add_trace(go.Scatter(
    x=list(range(len(y_l2relaxed))),
    y=y_l2relaxed,
    mode='lines',
    name='PDA L2',
    line=dict(color='#FFA500', width=1.5)
))
fig.add_trace(go.Scatter(
    x=list(range(len(y_RSC))),
    y=y_RSC,
    mode='lines',
    name='Robust SCM',
    line=dict(color='#FF4500', width=1.5)
))

# Add treatment line
fig.add_vline(
    x=T0,
    line=dict(color='#000000', width=2, dash='dash'),
    annotation_text="Moratorium",
    annotation_position="top left",
    annotation=dict(font_size=12)
)

fig.add_annotation(
    text="Estimated Impact: +12%",
    x=220, y=140,
    showarrow=False,
    font=dict(size=14, color="white"),
    bgcolor="green", opacity=0.8
)

# Update layout
fig.update_layout(
    title="mlsynth Estimates of Moratorium's Impact on Barcelona Hotel Prices",
    title_font_size=18,
    xaxis_title="Time (Weeks)",
    yaxis_title="Indexed Price",
    legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="center", x=0.5),
    template="plotly_white",
    showlegend=True,
    margin=dict(t=100),
    font=dict(size=12)
)

# Show plot
fig.show()

```

---

## Why `mlsynth` is different

::: columns
::: column
### Before (Ad-Hoc R/Python Workflows)

- Hard to automate (GitHub Actions)  
- Fragile dependencies/differing syntaxes 
- Limited variety of SCMs to use

:::

::: column

### After (mlsynth in Python)

- Easy automation in Python (CI/CD ready)  
- One consistent syntax
- Numerous, reproducible, production-ready methods

:::
:::
---

## Key Takeaways for Tripadvisor
::: {.columns}

::: {.column width="60%"}

- **Faster**: Faster analysis time, automated geo-testing  
- **Scalable**: Python-native, CI/CD ready, reproducible across teams  
- **Future-proof**: Extensible for new SCMs and custom tools  
:::

::: {.column width="40%" .callout-note}

### Next Steps

Partner with **Jared Greathouse** to:  
- Select optimal SCMs for Tripadvisorâ€™s use cases  
- Productionize workflows with `mlsynth` + CI/CD  
- Build a custom SCM tool with visualizations  

ðŸ“¬ [Jared Greathouse](https://jgreathouse9.github.io)  
:::

:::
## Appendix

This is the code used to produce the plot.

```{python}

#| echo: True

#| eval: False

import pandas as pd
from mlsynth import FSCM, CLUSTERSC, PDA

# Load public tourism dataset
url = "https://raw.githubusercontent.com/jgreathouse9/GSUmetricspolicy/refs/heads/main/data/RawData/hotelex.csv"
data = pd.read_csv(url)

# Configure inputs (unit, time, treatment, outcome)
config = {
    "df": data,
    "outcome": "indexed_price",
    "treat": "treat",
    "unitid": "fullname",
    "time": "time",
    "display_graphs": False
}

# Fit Forward SCM
arco = FSCM(config).fit()
y_obs = arco.sub_method_results['FSCM'].time_series.observed_outcome
y_FSCM = arco.sub_method_results['FSCM'].time_series.counterfactual_outcome.flatten()
T0 = arco.raw_results['Fit']['Pre-Periods']

# Fit PDA (L2 method)
config_pda = dict(config)
config_pda["method"] = "l2"
l2pda = PDA(config_pda).fit()
y_l2relaxed = l2pda.time_series.model_extra['synthetic_outcome']

# Fit Robust SCM
config_RSC = dict(config)
config_RSC["method"], config_RSC["cluster"] = "PCR", False
RSC = CLUSTERSC(config_RSC).fit()
y_RSC = RSC.sub_method_results['PCR'].time_series.counterfactual_outcome.flatten()
```

