[
  {
    "objectID": "aaascrape.html",
    "href": "aaascrape.html",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Web Scraping",
    "section": "",
    "text": "In academia, lots of the datasets we tend to work with come in pretty csv files. And while that’s great… oftentimes, in modern policy data science, the data we seek are unstructured in the sense that they do not come from a specific file such as a .csv file or Stata dataset. Such data must be web-scraped, or the process of gathering unstructured data, via reproducible script.\nThis post simply seeks to present a simple use case of web-scraping in the setting the applied policy scientist might need for certain tasks. Say we wish to gather the price of gas from AAA, across each metro area in the nation. In the old days, we’d need to ask AAA and pay thousands of dollars for an extended time series… but now we don’t need to, at least for this case. The reason is because we have Python, and we are able to leverage its basic features to collect these data via exploiting the publicly available information they provide us."
  },
  {
    "objectID": "aaascrape.html#the-scrape",
    "href": "aaascrape.html#the-scrape",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Web Scraping",
    "section": "The Scrape",
    "text": "The Scrape\nHere is the code for scrape. These are the helpers that we get one function to call. This is the nitty-gritty that calls and collects the data of interest.\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom dateutil.relativedelta import relativedelta\n\n\ndef fetch_gas_prices(state_abbreviations):\n    \"\"\"\n    Fetches and processes gas price data for multiple states and their respective cities.\n\n    This function scrapes the AAA Gas Prices website to collect gas prices for different fuel grades\n    (Regular, Mid-Grade, Premium, Diesel) in various cities within the specified states. The collected\n    data is then structured into a pandas DataFrame.\n\n    Parameters:\n    -----------\n    state_abbreviations : dict\n        A dictionary mapping state names to their respective abbreviations, e.g.,\n        {\"California\": \"CA\", \"Texas\": \"TX\"}.\n\n    Returns:\n    --------\n    pd.DataFrame\n        A DataFrame containing gas prices with columns:\n        ['Date', 'State', 'City', 'Regular', 'Mid-Grade', 'Premium', 'Diesel']\n    \"\"\"\n\n    headers = {\n        \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \"\n        \"(KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\n    }\n\n    today = pd.Timestamp.today()\n    time_mapping = {\n        \"Current Avg.\": lambda: today,\n        \"Yesterday Avg.\": lambda: today - pd.Timedelta(days=1),\n        \"Week Ago Avg.\": lambda: today - pd.Timedelta(weeks=1),\n        \"Month Ago Avg.\": lambda: today - relativedelta(months=1),\n        \"Year Ago Avg.\": lambda: today - relativedelta(years=1),\n    }\n\n    def extract_gas_prices(row, time_mapping, today, state, city_name):\n        \"\"\"\n        Extracts and processes gas price data from a single row in the gas price table.\n\n        Parameters:\n        -----------\n        row : bs4.element.Tag\n            A BeautifulSoup object representing a table row (&lt;tr&gt;) containing gas prices.\n        time_mapping : dict\n            A dictionary mapping AAA's time labels (e.g., \"Current Avg.\") to corresponding dates.\n        today : pd.Timestamp\n            The current date, used as a fallback if no valid time label is found.\n        state : str\n            The full name of the state (e.g., \"California\").\n        city_name : str\n            The name of the city corresponding to the extracted gas prices.\n\n        Returns:\n        --------\n        list\n            A list containing extracted data in the format:\n            [date (str), state (str), city (str), regular (str), mid-grade (str), premium (str), diesel (str)]\n        \"\"\"\n\n        cells = row.find_all(\"td\")\n        date_text = cells[0].get_text(strip=True)\n\n        # Get the corresponding date using time_mapping, defaulting to today\n\n        date = time_mapping.get(date_text, lambda: today)().strftime(\"%Y-%d-%m\")\n\n        # Extract prices, removing the dollar sign\n\n        prices = [cell.get_text(strip=True).replace(\"$\", \"\") for cell in cells[1:]]\n\n        return [date, state, city_name] + prices\n\n    def process_city_data(city, time_mapping, today, state):\n        \"\"\"\n        Extracts gas price data for a specific city by locating its corresponding table.\n\n        Parameters:\n        -----------\n        city : bs4.element.Tag\n            A BeautifulSoup object representing a city's heading element.\n        time_mapping : dict\n            A dictionary mapping time labels to actual date values.\n        today : pd.Timestamp\n            The current date used for fallback mapping.\n        state : str\n            The full name of the state.\n\n        Returns:\n        --------\n        list\n            A list of lists, where each inner list contains gas price data for a specific date in the format:\n            [date, state, city, regular, mid-grade, premium, diesel]\n        \"\"\"\n\n        city_name = city.get_text(strip=True)\n        rows = city.find_next(\"table\").select(\"tbody tr\")\n\n        return [\n            extract_gas_prices(row, time_mapping, today, state, city_name)\n            for row in rows\n        ]\n\n    def process_states(state_abbreviations, headers, time_mapping, today):\n        \"\"\"\n        Iterates through all states, sending requests to fetch and process gas price data.\n\n        Parameters:\n        -----------\n        state_abbreviations : dict\n            A dictionary mapping state names to their respective abbreviations.\n        headers : dict\n            HTTP request headers to mimic a real browser and avoid request blocking.\n        time_mapping : dict\n            A dictionary mapping AAA's date labels to actual date values.\n        today : pd.Timestamp\n            The current date used for fallback mapping.\n\n        Returns:\n        --------\n        list\n            A list of lists containing processed gas price data for all states in the format:\n            [date, state, city, regular, mid-grade, premium, diesel]\n        \"\"\"\n\n        all_data = []\n        for state, abbreviation in state_abbreviations.items():\n            params = {\"state\": abbreviation}\n            response = requests.get(\n                \"https://gasprices.aaa.com/\", params=params, headers=headers\n            )\n\n            if response.status_code != 200:\n                print(\n                    f\"Error fetching data for {state}. Status code: {response.status_code}\"\n                )\n                continue\n            soup = BeautifulSoup(response.content, \"html.parser\")\n\n            # Extract city sections\n\n            cities = soup.select(\".accordion-prices.metros-js &gt; h3[data-title]\")\n            all_data.extend(\n                [\n                    row_data\n                    for city in cities\n                    for row_data in process_city_data(city, time_mapping, today, state)\n                ]\n            )\n        return all_data\n\n    # Fetch and process data for all states\n\n    all_data = process_states(state_abbreviations, headers, time_mapping, today)\n\n    # Convert list of extracted data into a pandas DataFrame\n\n    all_data_df = pd.DataFrame(\n        all_data,\n        columns=[\"Date\", \"State\", \"City\", \"Regular\", \"Mid-Grade\", \"Premium\", \"Diesel\"],\n    )\n\n    # Convert 'Date' to datetime format\n\n    all_data_df[\"Date\"] = pd.to_datetime(all_data_df[\"Date\"], format=\"%Y-%d-%m\")\n\n    # Sort by 'State', 'City', and 'Date' for better organization\n\n    all_data_df = all_data_df.sort_values(by=[\"State\", \"City\", \"Date\"]).reset_index(\n        drop=True\n    )\n\n    return all_data_df\n\nWe first define AAA’s website as the URL of interest, Then, we inspect the URL for each state where the actual data for each city/metro is located at. For Massachusetts, the URL is “https://gasprices.aaa.com/?state=MA”. For Florida, the URL is “https://gasprices.aaa.com/?state=FL”. See the pattern? There’s a common prefix, with the only thing changing being the suffix of which is the abbreviation of the state.\nThe master function is fetch_gas_prices. This simply accepts a dictionary of state abbreviations (the value) paired with the key (the state name) we shall query over. We, within this function, define a common time mapping which AAA uses to stnadardize dates, and specify the current date.\nNext I use Python’s requests library to query each state (plenty of ways to do this step, but requests is generally the quickest for simple and even fairly big jobs). I then process each state with the process_states function. This accepts a list of states, headers, the common time mapping, and the current date. We then query each state, and clean the accordion-style tables that we see towards the bottom of the page. We clean them for each city/each metro area with the process_city_data function. Then append all of them into a single dataframe for each state, moving on to the next state after we’ve axhausted all metros for that state. Finally we appened the state dataframes together, where we have the date, the prices of gas, the state, and the city name all in one place."
  },
  {
    "objectID": "aaascrape.html#the-call",
    "href": "aaascrape.html#the-call",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Web Scraping",
    "section": "The Call",
    "text": "The Call\nWe may then call this whole script with a few lines of python code.\n\nimport pandas as pd\nfrom datetime import datetime\nfrom cityutils import fetch_gas_prices\nimport os\n\n# We just need the state abbreviations since\n# AAA indexes their states by the abbreviation.\n\nurl = \"https://raw.githubusercontent.com/jasonong/List-of-US-States/refs/heads/master/states.csv\"\n\n# We read the csv into a df\nstates_df = pd.read_csv(url)\n\n# Here is the main function that does the scrape.\ndf = fetch_gas_prices(dict(zip(states_df['State'], states_df['Abbreviation'])))\n\n# Format the date for the filename\ndate_str = datetime.now().strftime(\"%Y-%m-%d\")\n\n# Ensure the output directory exists\noutput_dir = \"./City Scrape/Data\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Save the DataFrame as \"/City Scrape/Data/City_{date}.csv\"\noutput_path = f\"{output_dir}/City_{date_str}.csv\"\ndf.to_csv(output_path, index=False)\n\nThis pulls everything together in a single dataframe ans saves it in a csv file. Notice that the data are collected from today, yesterday, last week, last month, and last year. Meaning, in theory, we have at least a year’s worth of prior data to collect, assuming we collected this data for a year.\nThis a simple case of web scraping. I’ve done more complicated scrapes, such as scraping the prices of goods across every Whole Foods in the country across 5 different departments per store. The scale of the job and the size of the data is much bigger, but the principles are overall the same. In the future, I will write more posts that demonstrate different applications of web-scraping and how policy scientists may use them. In particular, I will cover how scraping can go hand in hand with GitHub Actions. In my experience so far as a PHD student, these two alone (scraping and Github Actions) has made my life as a researcher far easier than otherwise."
  },
  {
    "objectID": "acene.html",
    "href": "acene.html",
    "title": "Why Data Generating Processes Matter for Causal Infernece",
    "section": "",
    "text": "I began my dissertation last week. The first chapter studies the causal impact of Texas’ repeal of the tampon tax on consumer demand as well as consumer price savings. Naturally, I’ll be using synthetic control methods as one may have guessed to answer this question. I was in the middle of doing the literature review, my favorite part of the research process. Upon doing some digging, I had to write a post about this. I found a paper which is titled “Why current menstrual policies do not work”. Much of the framing of the paper is actually fine, until we get to the part about evidence regarding the tampon tax. King writes\n\nSimilarly, a recent UK campaign to abolish a 5% ‘tampon tax’ unintentionally boosted the profits of disposable product manufacturers by about £15 million per year, without substantially reducing the cost of products for consumers,\n\nciting this paper at this link. I read this and thought “Hmm, I wonder what their identification strategy is.” So I went to look up the paper King cites. The paper, written by Tax Policy Associates, studies the pass through effects of abolishing the tampon tax (in the U.K.) on savings to consumers. For quick refernece, I grab the data from their Github and plot the treated unit (a normalized estimate of tampon sales) versus the trajectory of the controls. Instantly, we can see that this is an extremely high dimensional dataset. There are 646 control units and only 37 pre-treatment periods.\n\nimport requests\nimport pandas as pd\nfrom io import StringIO\nfrom mlsynth.mlsynth import PDA, FDID, dataprep\nimport os\nimport matplotlib\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ndef plot_treated_vs_controls(donor_matrix, treated_vector, pre_periods, title):\n    \"\"\"\n    Plots a single treated unit against the control group.\n    \n    Parameters:\n    - donor_matrix (numpy.ndarray): A 2D array where each column represents a control unit.\n    - treated_vector (numpy.ndarray): A 1D array representing the treated unit.\n    - pre_periods (int): The cutoff time index for the pre-treatment period.\n    - title (str): The title of the plot.\n    \"\"\"\n    plt.figure(figsize=(10, 5))\n\n    # Indicate pre-treatment period cutoff\n    plt.axvline(x=pre_periods, color='blue', linestyle='--', linewidth=1.5, label='Treatment Date')\n\n    # Plot control group trajectories\n    plt.plot(donor_matrix, color='gray', linewidth=0.2, alpha=0.35, label='_nolegend_')\n\n    # Plot the average of control units\n    average_controls = donor_matrix.mean(axis=1)\n    plt.plot(average_controls, color='red', linewidth=1, label='Mean of Controls')\n\n    # Plot the treated unit\n    plt.plot(treated_vector, color='black', linewidth=2, label='Tampons')\n\n    # Labels and legend\n    plt.title(title)\n    plt.xlabel('Time Periods')\n    plt.ylabel('Outcome')\n    plt.legend()\n    \n    plt.show()\n\n\njared_theme = {\n    \"axes.grid\": False,\n    \"grid.linestyle\": \"-\",\n    \"grid.color\": \"black\",\n    \"legend.framealpha\": 1,\n    \"legend.facecolor\": \"white\",\n    \"legend.shadow\": True,\n    \"legend.fontsize\": 14,\n    \"legend.title_fontsize\": 16,\n    \"xtick.labelsize\": 11,\n    \"ytick.labelsize\": 14,\n    \"axes.labelsize\": 14,\n    \"axes.titlesize\": 20,\n    \"figure.dpi\": 120,\n    \"axes.facecolor\": \"white\",\n    \"figure.figsize\": (10, 5.5),\n}\n\nmatplotlib.rcParams.update(jared_theme)\n\ndef fetch_and_combine_github_csvs(owner, repo, directory):\n    \"\"\"\n    Fetches all CSV files in the given GitHub directory that start with 'upload',\n    combines them into a single DataFrame, and processes it.\n\n    Parameters:\n        owner (str): GitHub username or organization name.\n        repo (str): Repository name.\n        directory (str): Directory path within the repository.\n\n    Returns:\n        pd.DataFrame: Combined and processed DataFrame.\n    \"\"\"\n    # GitHub API URL to list contents of the directory\n    api_url = f'https://api.github.com/repos/{owner}/{repo}/contents/{directory}'\n\n    # Get the directory contents\n    response = requests.get(api_url)\n    files = response.json()\n\n    # Filter for CSV files that start with 'upload'\n    csv_files = [file for file in files if file['name'].startswith('upload') and file['name'].endswith('.csv')]\n\n    # Base URL for raw file content\n    raw_base_url = f'https://raw.githubusercontent.com/{owner}/{repo}/main/{directory}/'\n\n    # List to hold DataFrames\n    df_list = []\n\n    # Download and read each CSV file\n    for file in csv_files:\n        csv_url = raw_base_url + file['name']\n        csv_response = requests.get(csv_url)\n        df = pd.read_csv(StringIO(csv_response.text))\n        df_list.append(df)\n\n    # Concatenate all DataFrames\n    combined_df = pd.concat(df_list, ignore_index=True)\n\n    combined_df['INDEX_DATE'] = pd.to_datetime(combined_df['INDEX_DATE'], format='%Y%m')\n\n    # Sort by panel and time\n    combined_df = combined_df.sort_values(by=['ITEM_ID', 'INDEX_DATE'])\n\n    # Create 'Tax' column and set to 1 if ITEM_ID == 520206 and INDEX_DATE &gt;= Jan 2021\n    combined_df['Tax'] = 0\n    combined_df.loc[(combined_df['ITEM_ID'] == 520206) & (combined_df['INDEX_DATE'] &gt;= '2021-01-01'), 'Tax'] = 1\n\n    selected_columns = [0, 1, 2, 5, -1]  # Column indices to keep\n    combined_df = combined_df.iloc[:, selected_columns]\n\n    combined_df = combined_df.reset_index(drop=True)\n\n    # Filter only ITEM_IDs that have exactly 53 observations,  to balance our panel\n    counts = combined_df['ITEM_ID'].value_counts()\n    balanced_item_ids = counts[counts == 53].index\n    combined_df = combined_df[combined_df['ITEM_ID'].isin(balanced_item_ids)]\n\n    combined_df['ITEM_ID'] = 'Unit ' + combined_df['ITEM_ID'].astype(str)\n\n    combined_df = combined_df.reset_index(drop=True)\n\n    return combined_df\n\n\nowner = 'DanNeidle'\nrepo = 'tampontax'\ndirectory = 'ONS_data'\ndf = fetch_and_combine_github_csvs(owner, repo, directory)\n\nprepped = dataprep(df, 'ITEM_ID', \"INDEX_DATE\", \"ITEM_INDEX\", 'Tax')\n\nplot_treated_vs_controls(prepped[\"donor_matrix\"], prepped[\"y\"], prepped[\"pre_periods\"], \"Tampons vs. Controls\")\n\n\n\n\n\n\n\n\nTo have a better sense of what is what, I’ll quote the paper directly, where the authors say\n\nWe used Office for National Statistics data to analyse tampon price changes around 1 January 2021, the date that the “tampon tax” was abolished. We were able to do this because the ONS includes tampons (but not other menstrual products) in the price quotes it samples every month to compile the consumer prices index. Since 2017, the ONS has published the full datasets for its price sampling.\n\nOkay fine. No problems so far. The authors find “Overall, the average price for [tampons in] the period after the VAT abolition is about 1.5% less than it was beforehand.” Still no issues so far. But then we check the methodology that they link to… and the results were less than exciting, putting it quite politely. Why? The authors do a simple t-test. That is, a simple pre-post test which compares the mean difference of tampon prices before the abolition of the tax and after the abolition of the tax. Precisely, they write\n\nApply [sic] statistical techniques to these datasets is not straightforward given the limited number of datapoints and very high degree of volatility. It was, however, thought appropriate to run an unequal variance one-sided t-test (using the python SciPy library) to compare the pricing datasets for the six months before 1 January 2021 with those for the subsequent six months.\n\nI read this and I was kind of horrified. Thought appropriate? By who? Who said this was a good idea? Who would look at this and say it is okay, especially for a written publication that people are going to cite? Look, I get it. I know that real data are often messy and that as data scientists we have to take steps to compensate for noise, corruption, and overall lack of cleanliness… but I must be clear about something: no matter what the extant difficulties are, this is not at all the correct way to do things. In fact, I’m going to prove it in this post, beyond saying “it’s just a t-test, so therefore it’s bad”. To really understand what is wrong here, we have to discuss the role of data generating processes and why they matter. All the time, we see statisticians write about low-rank models or linear factor models, and I’m not sure policy analysts or data scientists actually consider what they mean for applications."
  },
  {
    "objectID": "acene.html#did",
    "href": "acene.html#did",
    "title": "Why Data Generating Processes Matter for Causal Infernece",
    "section": "DID",
    "text": "DID\nFor DID, we presume the outcome \\(y_{jt}\\) is (at minimum) generated by:\n\\[\ny_{jt} = \\lambda_j + \\delta_t + \\epsilon_{jt},\n\\]\nwhere \\(\\lambda_j\\) is the unit-specific fixed effect, \\(\\delta_t\\) is the time-specific fixed effect, and \\(\\epsilon_{jt}\\) is the idiosyncratic mean zero error term. All this means is that each outcome we see in the spreadsheet is generated by some common time effect and unit specific effects. We begin by taking expectations, as this removes the error term. When we do this, we are left with\n\\[\n\\mathbb{E}[y_{jt}(0)] = \\lambda_j + \\delta_t.\n\\]\nNow, consider two periods, \\(t\\) and \\(t^{\\prime}\\). The expected untreated outcome at time \\(t\\) is \\(\\lambda_j + \\delta_t\\), and at time \\(t^{\\prime}\\) it is \\(\\lambda_j + \\delta_{t^{\\prime}}\\). The difference between these expected outcomes is:\n\\[\n\\mathbb{E}[y_{jt}(0)] - \\mathbb{E}[y_{jt^{\\prime}}(0)] = (\\lambda_j + \\delta_t) - (\\lambda_j + \\delta_{t^{\\prime}}) = \\delta_t - \\delta_{t^{\\prime}}.\n\\]\nNotice that the unit fixed effect \\(\\lambda_j\\) goes away. The difference in expected untreated outcomes depends only on the time effects \\(\\delta_t\\) and \\(\\delta_{t^{\\prime}}\\). This result applies both to the treated unit and to the control group. For the treated unit, denoted as \\(j = 1\\), the expected difference is:\n\\[\n\\mathbb{E}[y_{1t}(0)] - \\mathbb{E}[y_{1t^{\\prime}}(0)] = \\delta_t - \\delta_{t^{\\prime}}.\n\\]\nFor the control group, averaging over all units \\(j \\in \\mathcal{N}_0\\), we obtain:\n\\[\n\\mathbb{E}[y_{\\mathcal{N}_0 t}(0)] - \\mathbb{E}[y_{\\mathcal{N}_0 t^{\\prime}}(0)] = \\delta_t - \\delta_{t^{\\prime}}.\n\\]\nThis is saying that absent treatment, the equality\n\\[\n\\mathbb{E}[y_{1t}(0)] - \\mathbb{E}[y_{\\mathcal{N}_0 t}(0)] = \\mathbb{E}[y_{1t^{\\prime}}(0)] - \\mathbb{E}[y_{\\mathcal{N}_0 t^{\\prime}}(0)]\n\\]\nholds across all periods, including the post-intervention period. In other words, the difference between the treated and control units would remain constant over time, even absent the treatment. The groups do not need to have the same levels of outcomes; they only need to share the same average trends over time. This of course is the parallel trends assumption, which we can already see in plenty of work which extends this idea to the staggered adoption setting."
  },
  {
    "objectID": "acene.html#t-test",
    "href": "acene.html#t-test",
    "title": "Why Data Generating Processes Matter for Causal Infernece",
    "section": "T Test",
    "text": "T Test\nWe can follow the exact same logic for the t-test under an even simpler setup. In the pre-treatment period, the expected outcome for unit \\(j\\) is:\n\\[\n{\\color{red} \\mathbb{E}[y_{jt} \\mid d_{jt} = 0]} = \\mathbb{E}[\\lambda_j + \\delta_t + \\epsilon_{jt} \\mid d_{jt} = 0]\n\\]\nSince \\(\\lambda_j\\)and \\(\\delta_t\\)are both constant for a given unit and time, the expected outcome simplifies to:\n\\[\n{\\color{red} \\mathbb{E}[y_{jt} \\mid d_{jt} = 0]} = \\lambda_j + \\delta_t + {\\color{red} \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]}\n\\]\nSimilarly, in the post-treatment period, the expected outcome for unit \\(j\\)is:\n\\[\n{\\color{blue} \\mathbb{E}[y_{jt} \\mid d_{jt} = 1]} = \\mathbb{E}[\\lambda_j + \\delta_t + \\epsilon_{jt} \\mid d_{jt} = 1]\n\\]\nSince \\(\\lambda_j\\)and \\(\\delta_t\\)are again constant, this simplifies to:\n\\[\n{\\color{blue} \\mathbb{E}[y_{jt} \\mid d_{jt} = 1]} = \\lambda_j + \\delta_t + {\\color{blue} \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]}\n\\]\nNow, we compute the difference in expected outcomes between the pre-treatment and post-treatment periods for the treated unit\n\\[\n{\\color{blue} \\mathbb{E}[y_{jt} \\mid d_{jt} = 1]} -\n{\\color{red} \\mathbb{E}[y_{jt} \\mid d_{jt} = 0]}\n\\] This is just the t-test estimator expressed in terms of expectations. Substituting the expressions above into this, we get:\n\\[\n\\left( \\lambda_j + \\delta_t + {\\color{blue} \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]} \\right)\n-\n\\left( \\lambda_j + \\delta_t + {\\color{red} \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]} \\right)\n\\]\nSince both \\(\\lambda_j\\)(unit fixed effect) and \\(\\delta_t\\)(time fixed effect) are present in both terms, they cancel each other out:\n\\[\n{\\color{blue} \\mathbb{E}[y_{jt} \\mid d_{jt} = 1]} -\n{\\color{red} \\mathbb{E}[y_{jt} \\mid d_{jt} = 0]}\n=\n{\\color{blue} \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]} -\n{\\color{red} \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]}\n\\]\nNote that this would holds even for an interactive fixed effects model.\nFor the pre-post t-test to be valid, we essentially must assume that the error terms \\(\\epsilon_{jt}\\)are independent and identically distributed (i.i.d.) between the pre-treatment and post-treatment periods. This means that any difference in outcomes should be due solely to the treatment effect, not due to other unobserved factors.\nThe assumption is that the expected difference in error terms is zero:\n\\[\n{\\color{blue} \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]} - {\\color{red} \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]} = 0\n\\]\nThus, the difference in expected outcomes for the treated unit simplifies to:\n\\[\n{\\color{blue} \\mathbb{E}[y_{jt} \\mid d_{jt} = 1]} - {\\color{red} \\mathbb{E}[y_{jt} \\mid d_{jt} = 0]} = 0\n\\]\nThis result implies that any observed difference in outcomes between the pre- and post-treatment periods must be entirely due to the treatment effect and noise, assuming no confounding factors or time-specific shocks.\nWhy did I bother to derive all of this? Why should policy analysts care? Well, we care about having unbiased and consistent estimates of our treatment effect estimand. Estimators are grounded in some form of data generating process which has implications for their ability to do the task we care about. Parallel trends made by DID, while strong, is a much more defensible assumption than the one you’d need to make for a truly valid pre-post treatment t-test. DID says (even for multiple treated units under staggered adoption) that so long as our control group is parallel with respect to the treatment group, our ATT is identified. The assumptions of the t-test takes even time based confounding away- which basically is never true in real life.\nIn fairness, the Tax Policy Associates authors do recognize these shortcomings, writing\n\nThe prices of tampons and the other consumer goods considered in this paper will be affected by numerous factors… this makes it difficult to separate real trends from noise. More sophisticated statistical methods than a t-test are therefore not helpful (difference-in-difference and synthetic control methods were attempted, but did not produce meaningful results).\n\nThey do not share their code for either the latter, but I will share mine. I agree with them that there are plenty of confounding factors (mostly unobserved) and noise that we have to attempt to account for. In such situations, we should turn to modern econometrics instead fitting the data to a method."
  },
  {
    "objectID": "actins.html",
    "href": "actins.html",
    "title": "Causal Inference Runs the World: Actionable Insights, Econometrics Style",
    "section": "",
    "text": "Man, I hate industry jargon. Don’t get me wrong, I’m not against all jargon. I’ve been in academia ten years, and I’ve spent maybe 6 of those being tormented by econometrics. We have our own jargon too, which doesn’t always jive well with industry- I say “causal inference”, marketers will say “incrementality testing”. I say “experiment”, others say “A/B testing”. I say “practical significance”, others say “value”. There’s something about the data science industry lingo that irritates me. “Ambiguity” (I’ll do a post on this one, one day). “Self starter”. “Business acumen”. And the favorite of the day, “actionable insights.” This post is dedicated to showing you how I think about actionable insights. I approach this from the perspective of somebody who cares a lot about causal inference. I would like to focus on how we can use causal methods from econometrics to deliver actionable insights… But I’m getting ahead of myself.\n“Actionable insights”. It’s what we hear about all the time, even if it isn’t phrased exactly like that. Job descriptions and data science pages will go on and on about how we’re meant to deliver them as econometricians, policy analysts, and data scientists. Our livelihoods are essentially staked to producing them. But, what are actionable insights anyways? Some pages say ““Actionable insights” describes contextualised data analysis. It’s a piece of information that can actually be put into action — supported by the analysis, context and communication tools required to get the job done.” I agree with this. This leads us to one question then: how do we know which insights are actionable? And, more pressingly, how do we prodcue these in the first place?\n\n\nRecently I saw a post on LinkedIn. It went something like this:\n\nData Science Intern: “This is a chart of our App download trends.” Client: “So?”\n\n\nJunior Data Scientist: “The chart shows that downloading of the App increased by 45%, compared to the same time yesteryear.” Client: “Great! Why?”\n\n\nPrincipal Data Scientist: “The chart shows that downloading of the App increased by 45%, compared to the same time yesteryear due to our new pricing strategy. We should roll out Pricing Strategy in more markets since it’ll likely increase revenue by Big Amount.” Client: “That’s great! We’ll get right to it.”\n\nIn context, the post was about connecting your results to the next steps of actions businesses/clients should take, saying that context is key to making business recommendations. And that’s great, we should all be doing that. But I find the hypothetical Principal DS’s answer to be quite wanting. I do not understand why we are meant to see the Principal DS’s remarks as any more wise than the Junior DS. Why?\nThe Principal DS was implicitly making a counterfactual claim in this example. They were explaining to the client that their Policy W had X impact on Outcome Y, an even went as far as to say that if we kept doing Policy W, we may see gains elsewhere in the future. And this may be true. But how can we tell? For all the talk we have about showing impact (instead of telling what you did descriptively), surely we can do better than this. How? Causal inference.\nHere is my issue with the post: the second you add the phrase “Impact X happened given our new pricing strategy/policy/other intervention”, we’re now very far aflung from Descriptiville, stuck in Counterfactual Land. In this domain, the laws work differently. You will never get by if the most you can do is simply getting Tableau/BI to make us a chart. Here you see, we need to have some estimate of how sales (or whatever metric we’re meant to care about) would’ve evolved ABSENT whatever the new policy was. Put differently, you can’t just show a bar chart and say “You should do X cuz I made this chart and have verbally attached an explanation to why we see a number”. It requires A LOT more work than that."
  },
  {
    "objectID": "actins.html#a-motivating-example",
    "href": "actins.html#a-motivating-example",
    "title": "Causal Inference Runs the World: Actionable Insights, Econometrics Style",
    "section": "",
    "text": "Recently I saw a post on LinkedIn. It went something like this:\n\nData Science Intern: “This is a chart of our App download trends.” Client: “So?”\n\n\nJunior Data Scientist: “The chart shows that downloading of the App increased by 45%, compared to the same time yesteryear.” Client: “Great! Why?”\n\n\nPrincipal Data Scientist: “The chart shows that downloading of the App increased by 45%, compared to the same time yesteryear due to our new pricing strategy. We should roll out Pricing Strategy in more markets since it’ll likely increase revenue by Big Amount.” Client: “That’s great! We’ll get right to it.”\n\nIn context, the post was about connecting your results to the next steps of actions businesses/clients should take, saying that context is key to making business recommendations. And that’s great, we should all be doing that. But I find the hypothetical Principal DS’s answer to be quite wanting. I do not understand why we are meant to see the Principal DS’s remarks as any more wise than the Junior DS. Why?\nThe Principal DS was implicitly making a counterfactual claim in this example. They were explaining to the client that their Policy W had X impact on Outcome Y, an even went as far as to say that if we kept doing Policy W, we may see gains elsewhere in the future. And this may be true. But how can we tell? For all the talk we have about showing impact (instead of telling what you did descriptively), surely we can do better than this. How? Causal inference.\nHere is my issue with the post: the second you add the phrase “Impact X happened given our new pricing strategy/policy/other intervention”, we’re now very far aflung from Descriptiville, stuck in Counterfactual Land. In this domain, the laws work differently. You will never get by if the most you can do is simply getting Tableau/BI to make us a chart. Here you see, we need to have some estimate of how sales (or whatever metric we’re meant to care about) would’ve evolved ABSENT whatever the new policy was. Put differently, you can’t just show a bar chart and say “You should do X cuz I made this chart and have verbally attached an explanation to why we see a number”. It requires A LOT more work than that."
  },
  {
    "objectID": "actins.html#defining-the-problem",
    "href": "actins.html#defining-the-problem",
    "title": "Causal Inference Runs the World: Actionable Insights, Econometrics Style",
    "section": "Defining the Problem",
    "text": "Defining the Problem\nSuppose we work for Uber. Uber introduced Uber Green in September of 2020, as an initiative that is meant to (among other things) incentivize drivers to use electric cars/low emissions vehicles. Suppose our supervisor tasks us with evaluating whether this policy in fact affected the number of drivers who use electric cars, as was the intended goal. Given this situation, we must roll out this intervention someplace first in order to see how it may work in other markets (say, Sayulita, Mexico), and we must generate a counterfactual. Or, the number of drivers who would have used electric cars but for Uber Green’s introduction. In order to accomplish this task, I will use synthetic control based methodologies to estimate the impact. Of course, the goal here is to compute the average treatment effect on the treated, or the average of the differences between our treated unit and the out-of-sample predictions (post intervention period). This allows us to have a summary statistic of the causal effect, as an averge or as a total."
  },
  {
    "objectID": "actins.html#solving-the-problem",
    "href": "actins.html#solving-the-problem",
    "title": "Causal Inference Runs the World: Actionable Insights, Econometrics Style",
    "section": "Solving the Problem",
    "text": "Solving the Problem\n\nLet \\(\\mathcal{N}\\) denote the set of cities indexed by \\(j\\), where \\(N \\coloneqq |\\mathcal{N}|\\) represents the total number of markets. Sayulita, the treated city, is indexed by \\(j = 1\\), while the set of control cities is denoted by \\(\\mathcal{N}_0 \\coloneqq \\mathcal{N} \\setminus \\{1\\}\\), with cardinality \\(N_0 \\coloneqq |\\mathcal{N}_0|\\). Time periods are indexed by \\(t\\), with pre-intervention periods \\(\\mathcal{T}_1 \\coloneqq \\{1, 2, \\dots, T_0\\}\\) and post-intervention periods \\(\\mathcal{T}_2 \\coloneqq \\{T_0+1, \\dots, T\\}\\), where \\(T_0\\) is the last period before the intervention.\nFor each market \\(j\\), let \\(\\mathbf{y}_j \\coloneqq [y_{jt}, \\dots, y_{jT}]^\\top \\in \\mathbb{R}^{T}\\) represent the vector of new drivers who use electric cars, where \\(y_{jt}\\) denotes the number of weekly new drivers in market \\(j\\) at time \\(t\\). Let \\(\\mathbf{Y}_0 \\coloneqq (\\mathbf{y}_j)_{j \\in \\mathcal{N}_0} \\in \\mathbb{R}^{T \\times N_0}\\) be the matrix of control markets that did not do this intervention at this time. To estimate the counterfactual new driver supply in Sayulita, we construct a synthetic control by taking some weighted average of the control markets based on their pre-intervention trends, \\(\\hat{\\mathbf{y}}_1(0) = \\mathbf{Y}_0 \\mathbf{w}^\\top\\), where \\(\\mathbf{w} \\in \\mathbb{R}^{N_0}\\) is a vector of weights assigned to the control cities. These weights are chosen to minimize some loss function. The treatment effect at time \\(t\\) is then estimated as the difference between the observed and counterfactual outcomes, \\(\\widehat{\\Delta}_t \\coloneqq y_{1t} - \\hat{y}_{1t}(0)\\). Our result of interest is the average of these treatment effects over the post-intervention period:\n\\[\n\\widehat{ATT} \\coloneqq \\mathbb{E}_2[\\widehat{\\Delta}_t] = \\frac{1}{T_2} \\sum_{t \\in \\mathcal{T}_2} \\widehat{\\Delta}_t.\n\\]\nIf the introduction of Uber Green in Sayulita leads to an increase in the number of new drivers who use electric vehicles, we expect \\(\\widehat{\\Delta}_t\\), we can then comment on how this program may be applied to other areas.[^1]. The observed new drivers who use electric cars in Sayulita follows a factor model:\n\\[\n\\mathbf{y}_1 = \\mathbf{\\Gamma} \\mathbf{F} + \\boldsymbol{\\nu}_1 + \\boldsymbol{\\delta} \\mathbb{1}(t \\geq T_0),\n\\]\nwhere \\(\\mathbf{\\Gamma} \\in \\mathbb{R}^{1 \\times k}\\) represents the factor loadings, \\(\\mathbf{F} \\in \\mathbb{R}^{k \\times T}\\) is the matrix of latent common factors, and the factors evolve as:\n\\[\n\\mathbf{F}_t = \\rho \\mathbf{F}_{t-1} + \\boldsymbol{\\eta}_t, \\quad \\boldsymbol{\\eta}_t \\sim \\mathcal{N}(\\mathbf{0}, \\mathbf{I}_k),\n\\]\nwhere \\(\\rho\\) is the autocorrelation parameter and \\(\\boldsymbol{\\eta}_t\\) is a noise term. The idiosyncratic error term, \\(\\boldsymbol{\\nu}_1\\), is assumed to follow a normal distribution with zero mean and variance \\(\\sigma^2\\), i.e., \\(\\boldsymbol{\\nu}_1 \\sim \\mathcal{N}(\\mathbf{0}, \\sigma^2 \\mathbf{I})\\). The treatment effect vector \\(\\boldsymbol{\\delta} \\coloneqq [\\delta_{T_0+1}, \\dots, \\delta_T]^\\top\\) represents the change in driver supply due to the Uber Green intervention, which is assumed to affect Sayulita starting at time \\(T_0+1\\).\n\nLet’s begin by plotting our outcome. The plot depicts the weekly new Uber drivers who have switched to electric vehicles. Sayulita is our target unit in black, the average of the control group is the thin red line, and the thin grey line are our donors that didn’t enact the intervention.\n\n\n\n\n\n\n\n\n\nA few things are apparent: for one, the parallel trends assumption doesn’t apply here across the 75 pre-treatment periods. The mean of controls doesn’t mirror the trend of Sayulita. So, we must use something a little more sophisticated than the standard Difference-in-Differences method. Furthermore, these donors have pretty noisy outcome series. Fortunately, we can exploit the low rank structure of our control group and use that to learn the weights which reconstructs the pre-intervention time series for our treated unit. I’ve written more about this here. Basically, we denoise the data via PCA or functional analysis, and cluster over the functional representation of control units or their right singular values, and extract the donor pool from this low-rank representation. We can then use principal component regression or robust principal component regression to learn our unit weights.\nWhen we do this, we obtain these predictions, of course using my mlsynth to fit the pre-intervention period.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMetric\nRSC\nRPCASC\n\n\n\n\n0\nPre-Treatment RMSE\n1.263\n2.285\n\n\n1\nATT\n14.875\n17.312\n\n\n2\nPercent ATT\n22.473\n27.154\n\n\n\n\n\n\n\nWe can see that both the Robust PCA Synthetic Control and the Robust Synthetic Control/Principal Component Regression methods fit Sayulita quite well in the pre-intervention period. They also have very similar ATTs, suggesting that Uber Green increased new electric vehicle use amongst its drivers by anywhere from 22.473 to 26.425 percent. The normal ATTs are also pretty close to the what I simulated, an ATT of 15. Next, I’ll simulate the ATT using Forward Difference-in-Differences.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nMetric\nFDID\nDID\n\n\n\n\n0\nATT\n15.527\n14.957\n\n\n1\nPre-Treatment RMSE\n2.315\n5.572\n\n\n2\nPercent ATT\n23.691\n22.624\n\n\n\n\n\n\n\nHere we plot the results of the standard Difference-in-Differences design and the Forward DID method. As we can see, parallel pre-intervention trends doesn’t hold at all. The selected parallel trends made by FDID is a lot more sensible in this instance, fitting as well as the synthetic control methods as above.\nJust to go really crazy, I decided to combine my estimates into a convex average. Let \\(K\\) denote the number of counterfactual models, in our case 3. Define \\(\\mathbf{A} \\in \\mathbb{R}^{T \\times K}\\) as the matrix of counterfactual vectors, where each column corresponds to a model and each row represents a time period. The optimization problem is formulated as:\n\\[\n\\min_{\\mathbf{w} \\in \\Delta_K} \\left\\| \\mathbf{y}_1 - \\mathbf{A} \\mathbf{w} \\right\\|_2\n\\]\nwhere \\(\\mathbf{w}\\) belongs to the simplex:\n\\[\n\\mathbf{w} \\in \\Delta_K = \\left\\{ \\mathbf{w} \\in \\mathbb{R}_{\\geq 0}^K \\mid \\left\\| \\mathbf{w} \\right\\|_1 = 1 \\right\\},\n\\]\nor the set spanned by the convex hull of the differing model predictions.\n\n\n\n\n\n\n\n\n\nThe ATT we compute is 14.902. Just as a very technical note, we see that the RMSE here with the model averaged estimator is lower than any other model I’ve estimated so far. This is because of Jensen’s inequality. Jensen’s inequality states that for a convex function \\(f\\) and a set of inputs, the function’s value at the weighted average is less than or equal to the weighted average of the function’s inputs:\n\\[\nf\\left(\\sum_{k=1}^{K} w_k A_k\\right) \\leq \\sum_{k=1}^{K} w_k f(A_k).\n\\]\nIn our case, we consider the function of the MSE. Due to the quadratic term, \\(f(x) = x^2\\), we have a convex function. Applying Jensen’s inequality to our loss function, we have\n\\[\n\\text{MSE}(\\mathbf{w}^\\top \\mathbf{A}) = \\mathbb{E} \\left[ (\\mathbf{y}_1 - \\mathbf{w}^\\top \\mathbf{A})^2 \\right] \\leq \\sum_{k=1}^{K} w_k \\mathbb{E} \\left[ (\\mathbf{y}_1 - A_k)^2 \\right],\n\\]\nwhich essentially guarantees that our model averaged pre-treatment MSE must be lower than the MSE of one of these models by themselves."
  },
  {
    "objectID": "actins.html#communicating-actionable-insights",
    "href": "actins.html#communicating-actionable-insights",
    "title": "Causal Inference Runs the World: Actionable Insights, Econometrics Style",
    "section": "Communicating Actionable Insights",
    "text": "Communicating Actionable Insights\nWhy is this approach superior than simply showing a chart/bar graph? With these results, we can communicate findings easier than before. Instead of simply speculating, we can say, for example,\n\nWe simulated the effect of Uber Green four times. Our best estimates suggest that the percentage of new drivers who use electric cars increased between 22.473 and 26.4 percent in the weeks following the Uber Green program being introduced (I also here might use the Bayesian prediction intervals from RSC to comment on uncertainty). When we combined our best three models together, Uber Green added 15 more electric car drivers on average per week. The program added around 488 more electric car drivers than what we would’ve seen otherwise. We would need to roll out the program in new areas for more confirmation, but the evidence suggests Uber Green increases electric car usage.\n\nSee how I’m not simply speculating with a bar chart? The value added here is that I’m simulating the universe where what did happen, did not happen, and then I’m tentatively suggesting that we implement the program elsewhere based off my findings, not a simple analysis of trends. The potential outcomes framework, when implemented judiciously, directly suggests what should or should not be done based off the treatment effects and uncertainty.\nThis is even more evident when we consider the actual presentation of my results. I’m actually showing the client the effect of the program, not just telling them. I am presenting them an explicit picture of how the world would look if they didn’t do their policy or intervention. This is the great thing about synthetic control methods (and other methods like Difference-in-Differences event studies) ; they’re very visual designs. They can be explained to people who have 0 training with and are easy to follow. The treatment effect of Uber Green here pops right out at you, mkaing the choice (more drivers being better than less drivers) obvious. What’s more, the assumptions of my model can can (sometimes) explicitly be defended, instead of sort of arguing from intuition.\nWhile I can’t predict how the treatment would behave in other markets (well I lied, I kinda can), the econometric approach of testing for causal impacts presents a far more compelling picture than me simply saying “Hey this bar chart shows an effect and I’m gonna speculate the effect is cuz of this policy.” This is why I say causal inference runs the world: assuming we expect our policies to impact people and increase value for our clients, doing rigourous impact analysis is key to assess whether we are actual in fact doing that."
  },
  {
    "objectID": "clustsc.html",
    "href": "clustsc.html",
    "title": "On the Use of Clustering for Synthetic Controls",
    "section": "",
    "text": "Picking a donor pool is very important with the synthetic control method. The vanilla method suffers from interpolation biases in the case when the donor pool is not suitable for the target unit. This is farily common with applied SCM in real life, as oftentimes we may have a high-dimensional donor pool and not know what the right control units would be a priori. The standard advice given in this instance is to limit our control group to units that are already similar to the target unit. But how do we do this? One way is to use clustering methods to select the control group. Consider the classic Basque Country example below, where the Basque Country undergoes a wave of terrorism in the mid-1970s which is thought to impact their GDP per Capita relative to other areas of Spain.\nHere, we plot the Basque versus the average of its controls as well as the individual donor outcome vectors themselves. We can see that the Basque Country is one of the wealthiest areas of Spain, up there with Madrid, Cataluna, and the Balearic Islands. We have other donors too, which by comparison are less wealthy. The key, then, is to ask which donors we should select for the synthetic control algorithm to consider in the first place, by exploiting pre-intervention similarities between the treated unit and control group. With “better” pre-policy donors, there is a higher chance that our out-of-sample predictions would be closer to the actual counterfactual."
  },
  {
    "objectID": "clustsc.html#plotting-our-selected-donors",
    "href": "clustsc.html#plotting-our-selected-donors",
    "title": "On the Use of Clustering for Synthetic Controls",
    "section": "Plotting Our Selected Donors",
    "text": "Plotting Our Selected Donors\n\n\n\n\n\n\n\n\n\nHere we plot the Basque Country versus its selected donors. We can see that these donors (Cataluna, the very closest grey line in Euclidean distance to the Basque Country), Madrid, and the Balearic Islands are much more similar to the Basque Country than the other 13 control units. Both fPCA-clustering implemented in Mani’s dissertation and the clustering over the right singular vectors choose the same donor pool when the pretreatment period extends up to 1975."
  },
  {
    "objectID": "clustsc.html#takeaways-for-practitioners",
    "href": "clustsc.html#takeaways-for-practitioners",
    "title": "On the Use of Clustering for Synthetic Controls",
    "section": "Takeaways for Practitioners",
    "text": "Takeaways for Practitioners\nThe meaning of these results are quite simple: donor selection matters for SCM studies. In fact, simple machine-learning donor selection methods can oftentimes give the same or similar answers to classical studies which oftentimes used covariates (in the original SCM paper, Abadie and his advisor used 13 covariates to construct the counterfactual, returning Cataluna and Madrid as the weighted donors). I say oftentimes because these results are predicated on both assumptions and tuning parameters. We assume, for example, some low rank approximation exists that can fit the pre-intervention time series of the treated unit. The tuning parameters matter too– the lambda parameters control the sparisty of our results, for example. I use a simple herustic to tune it, but it may be more reasonable to use methods such as cross-validation to select the number of clusters or the values lambda should take, but this would demand simulation evidence.\nEither way, the main benefit for policy analysts is that these two methods offer ways to select a donor poor for synthetic control methods, on top of not needing to collect auxilary covariates that the original paper used to obtain very similar counterfactual predictions, and more work should be done on these estimators to see when and why they’d agree."
  },
  {
    "objectID": "fdid.html",
    "href": "fdid.html",
    "title": "Applying Forward DID to Construction and Tourism Policy",
    "section": "",
    "text": "Causal inference is critical to economics, marketing, policy, and other sectors of industry. Frequently, policies or natural events occur that may affect metrics we care about. In order to maximize our decision making capabilities, understanding the effects of these events we care about is critical so that businseses and governments may plan future business decisions better or know if a policy intervention achieves its intended aims. In absence of A/B tests (randomized controlled trials, which is quite popular amongst marketing firms/other areas of tech), business scientists and policy analysts frequently resort to constructing counterfactuals to infer treatment effecs. This is because conducting proper experiments is difficult, costly, and/or unethical, especially with most of the events we are concerned with which impact millions of people.\nDifference-in-Differences (DID) is one of the most popular methods for quasi-experimental designs/treatment effect analysis. DID is simple to compute, and is valid even in settings where we have one treated unit and a single control unit. The key identifying assumption of DID is parallel trends (PTA), or that the trend of the treated group would be constant with respect to the control group had a given intervention or policy never took place. Additionally, PTA posits no-anticipation of the intervention. Various restatements of PTA are common in the econometrics literature, especially under staggered adoption where DID is frequently applied to use cases researchers care about. However, sometimes DID is used even in settings of a single treated unit. And in these settings, PTA may be less likely to hold. This blog post goes over the Forward DID method with an application to the construction/tourism industry."
  },
  {
    "objectID": "fdid.html#business-use-cases",
    "href": "fdid.html#business-use-cases",
    "title": "Applying Forward DID to Construction and Tourism Policy",
    "section": "Business Use Cases",
    "text": "Business Use Cases\nWhen might these be useful in business science such as construction or in tourism? Well for one, lots of states have passed laws regarding heat safety for workers which restrict local areas from passing laws which would provide workers with water, shade, and rest in the hot summer months. We can use these techniques to see how such laws/policies affect labor or safety. We can use causal inference to estimate the impact of events that are meant to affect the demand for tourism or other KPIs the tourism industry cares about. For construction, the physical building of construction units could be affected by these kind of policies, impacting metrics like put-in-place value or project stress indices. On the supply side, we may quantify the effects of policies such as tariffs on the costs of materials. With proper causal infernece, firms and policymakers may plan more effectively, knowing whether to pursue current policies or not, and take action with scientifically based analysis."
  },
  {
    "objectID": "fscm.html",
    "href": "fscm.html",
    "title": "Forward Synthetic Control Estimation",
    "section": "",
    "text": "Interpolation bias is a known issue in synthetic control methods. For valid counterfactual prediction, the donor units should be as similar as possible to the treated unit in the pre-treatment period. Selecting an appropriate donor pool is therefore critical, but this can be challenging in settings with many potential controls. This post introduces the Forward Selected Synthetic Control Method, which applies Forward Selection to choose the donor pool for a synthetic control model before estimating out-of-sample predictions.\nLet \\(\\mathbb{R}\\) denote the set of real numbers. A calligraphic letter, such as \\(\\mathcal{S}\\), represents a discrete set with cardinality \\(S = |\\mathcal{S}|\\). Let \\(t \\in \\mathbb{N}\\) and \\(i \\in \\mathbb{N}\\) represent indices for \\(T\\) time periods and \\(N\\) units, respectively. The pre-treatment period consists of consecutive time periods:\n\\[\n\\mathcal{T}_1 = \\{1, 2, \\dots, T_0\\},\n\\]\nwith cardinality \\(T_1\\), while the post-treatment period is given by:\n\\[\n\\mathcal{T}_2 = \\{T_0 + 1, \\dots, T\\},\n\\]\nwith cardinality \\(T_2\\). The treated unit is indexed by \\(i = 1\\), while the remaining control units are indexed as \\(\\mathcal{N}_0 = \\{2, \\dots, N\\}\\), with cardinality \\(N_0 = N - 1\\). The observed outcome for unit \\(i\\) at time \\(t\\) is denoted by \\(y_{it}\\). The outcome vector for the treated unit is:\n\\[\n\\mathbf{y}_1 = \\begin{bmatrix} y_{11} & y_{12} & \\cdots & y_{1T} \\end{bmatrix}^\\top \\in \\mathbb{R}^T,\n\\]\nwhere each entry corresponds to the outcome of the treated unit at time \\(t\\). The donor pool matrix, which concatenates the control unit outcome vectors, is defined as:\n\\[\n\\mathbf{Y}_0 \\in \\mathbb{R}^{T \\times N_0}.\n\\]\nThe space of synthetic control weights is the \\((N_0-1)\\)-dimensional probability simplex:\n\\[\n\\Delta^{N_0 - 1} = \\left\\{ \\mathbf{w} \\in \\mathbb{R}_{\\geq 0}^{N_0} : \\|\\mathbf{w}\\|_1 = 1 \\right\\}.\n\\]\nNow, consider a restricted donor pool chosen by forward selection. This consists of a strict subset of control units, \\(\\mathcal{S} \\subseteq \\mathcal{N}_0\\), with cardinality \\(k = |\\mathcal{S}|\\) where \\(k &lt; N_0\\). This subset induces a subsimplex:\n\\[\n\\Delta^{k - 1}(\\mathcal{S}) = \\left\\{ \\mathbf{w}' \\in \\mathbb{R}_{\\geq 0}^{k} : \\|\\mathbf{w}'\\|_1 = 1 \\right\\}.\n\\]\nSince any feasible weight vector \\(\\mathbf{w}' \\in \\Delta^{k-1}(\\mathcal{S})\\) can be embedded in \\(\\Delta^{N_0-1}\\) by setting the weights of all units outside \\(\\mathcal{S}\\) to zero, we have the natural inclusion:\n\\[\n\\Delta^{k - 1}(\\mathcal{S}) \\subseteq \\Delta^{N_0 - 1}.\n\\]\nThe forward selection procedure iteratively constructs the donor pool by selecting control units that minimize pre-treatment mean squared error (\\(\\text{MSE}\\)).\nAt each step, a new control unit is selected based on its contribution to reducing \\(\\text{MSE}\\), and the procedure terminates when no additional unit improves the fit.\nThe procedure begins by evaluating each donor unit \\(j \\in \\mathcal{N}_0\\) independently. For each donor, we solve:\n\\[\n\\underset{\\mathbf{w} \\in \\Delta^0(\\{j\\})}{\\operatorname*{argmin}} \\| \\mathbf{y}_{1,\\mathcal{T}_1} - \\mathbf{Y}_{0,\\mathcal{T}_1} \\mathbf{w} \\|_2^2.\n\\]\nThis computes one \\(\\text{MSE}\\) per donor unit. The donor with the lowest \\(\\text{MSE}\\), denoted as \\(j^\\ast\\), is selected as the first element of the donor set:\n\\[\nj^\\ast = \\underset{j \\in \\mathcal{N}_0}{\\operatorname*{argmin}} \\| \\mathbf{y}_{1,\\mathcal{T}_1} - \\mathbf{Y}_{0,\\mathcal{T}_1} \\mathbf{w}^{(j)} \\|_2^2.\n\\]\nWe define the initial donor set as:\n\\[\n\\mathcal{S}_1 = \\{j^\\ast\\}.\n\\]\nAt each subsequent iteration \\(K\\), we expand the donor pool by selecting an additional control unit. For each candidate donor \\(j \\in \\mathcal{N}_0 \\setminus \\mathcal{S}_{K-1}\\), we solve:\n\\[\nj^\\ast = \\underset{j \\in \\mathcal{N}_0 \\setminus \\mathcal{S}_{K-1}}{\\operatorname*{argmin}} \\underset{\\mathbf{w} \\in \\Delta^{K}(\\mathcal{S}_{K-1} \\cup \\{j\\})}{\\operatorname*{min}} \\| \\mathbf{y}_{1,\\mathcal{T}_1} - \\mathbf{Y}_{0,\\mathcal{T}_1} \\mathbf{w} \\|_2^2.\n\\]\nThe selected unit \\(j^\\ast\\) is added to the donor pool:\n\\[\n\\mathcal{S}_K = \\mathcal{S}_{K-1} \\cup \\{j^{\\ast}\\}.\n\\]\nThe procedure terminates when \\(K= N_0\\). The final donor pool is chosen as:\n\\[\n\\mathcal{S}^{\\ast} = \\underset{\\mathcal{S}_i \\in \\{\\mathcal{S}_1, \\mathcal{S}_2, \\dots, \\mathcal{S}_K\\}}{\\operatorname*{argmin}} \\ \\text{MSE}(\\mathcal{S}_i),\n\\]\nor the subsimplex that minmizes the pre-treatment MSE. Note that not all donors in \\(\\mathcal{S}^{\\ast}\\) necessarily receive positive weight in the final solution! These are just the units that are selected dor inclusion in the donor pool.\n\n\nAs ususal, we begin by installing mlsynth.\npip install -U git+https://github.com/jgreathouse9/mlsynth.git\nAnd then we load the Prop 99 data and fit the model in the ususal mlsynth fashion.\n\nimport pandas as pd\nfrom IPython.display import display, Markdown\nfrom mlsynth.mlsynth import FSCM\nurl = \"https://raw.githubusercontent.com/jgreathouse9/mlsynth/refs/heads/main/basedata/smoking_data.csv\"\ndata = pd.read_csv(url)\nconfig = {\n    \"df\": data,\n    \"outcome\": data.columns[2],\n    \"treat\": data.columns[-1],\n    \"unitid\": data.columns[0],\n    \"time\": data.columns[1],\n    \"display_graphs\": True,\n    \"save\": False,\n    \"counterfactual_color\": \"red\"}\n\narco = FSCM(config).fit()\n\n\n\n\n\n\n\n\nAfter estimating, we can get the weights like\n\nweights_dict = arco['Weights'][0]\ndf = pd.DataFrame(list(weights_dict.items()), columns=['State', 'Weight'])\ndisplay(Markdown(df.to_markdown(index=False)))\n\n\n\n\nState\nWeight\n\n\n\n\nMontana\n0.232\n\n\nAlabama\n-0\n\n\nColorado\n0.015\n\n\nConnecticut\n0.109\n\n\nGeorgia\n-0\n\n\nIdaho\n0\n\n\nIllinois\n0\n\n\nNevada\n0.205\n\n\nNew Hampshire\n0.045\n\n\nNew Mexico\n0\n\n\nNorth Carolina\n0\n\n\nNorth Dakota\n-0\n\n\nOklahoma\n-0\n\n\nUtah\n0.394\n\n\nVermont\n-0\n\n\nWest Virginia\n0\n\n\nWyoming\n0\n\n\n\n\n\nThese are the weights for all 17 units that were selected by the algorithm. As we can see, all of these even did not ultimately contribute to the synthetic control, with only 6 being assigned positive weight."
  },
  {
    "objectID": "fscm.html#estimation-in-mlsynth",
    "href": "fscm.html#estimation-in-mlsynth",
    "title": "Forward Synthetic Control Estimation",
    "section": "",
    "text": "As ususal, we begin by installing mlsynth.\npip install -U git+https://github.com/jgreathouse9/mlsynth.git\nAnd then we load the Prop 99 data and fit the model in the ususal mlsynth fashion.\n\nimport pandas as pd\nfrom IPython.display import display, Markdown\nfrom mlsynth.mlsynth import FSCM\nurl = \"https://raw.githubusercontent.com/jgreathouse9/mlsynth/refs/heads/main/basedata/smoking_data.csv\"\ndata = pd.read_csv(url)\nconfig = {\n    \"df\": data,\n    \"outcome\": data.columns[2],\n    \"treat\": data.columns[-1],\n    \"unitid\": data.columns[0],\n    \"time\": data.columns[1],\n    \"display_graphs\": True,\n    \"save\": False,\n    \"counterfactual_color\": \"red\"}\n\narco = FSCM(config).fit()\n\n\n\n\n\n\n\n\nAfter estimating, we can get the weights like\n\nweights_dict = arco['Weights'][0]\ndf = pd.DataFrame(list(weights_dict.items()), columns=['State', 'Weight'])\ndisplay(Markdown(df.to_markdown(index=False)))\n\n\n\n\nState\nWeight\n\n\n\n\nMontana\n0.232\n\n\nAlabama\n-0\n\n\nColorado\n0.015\n\n\nConnecticut\n0.109\n\n\nGeorgia\n-0\n\n\nIdaho\n0\n\n\nIllinois\n0\n\n\nNevada\n0.205\n\n\nNew Hampshire\n0.045\n\n\nNew Mexico\n0\n\n\nNorth Carolina\n0\n\n\nNorth Dakota\n-0\n\n\nOklahoma\n-0\n\n\nUtah\n0.394\n\n\nVermont\n-0\n\n\nWest Virginia\n0\n\n\nWyoming\n0\n\n\n\n\n\nThese are the weights for all 17 units that were selected by the algorithm. As we can see, all of these even did not ultimately contribute to the synthetic control, with only 6 being assigned positive weight."
  },
  {
    "objectID": "gitact.html",
    "href": "gitact.html",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Github Actions",
    "section": "",
    "text": "Life is full of repititive actions and work in data science is no exception to this. Perhaps you must produce a plot of some form to clean a specific dataset/set of datasets each week, say revenue data or some such thing. Or perhaps, some files must be managed or cleaned, or a researcher wishes to collect the public housing data from Zillow each month when it updates. On one hand, we could physically do this ourselves, but this leaves us open to errors: for one, if we’re scraping a dataset from a website, what if the data are only there temporarily? What if it only exists for today, and then tomorrow it is updated with the then current data? What if we are away from our computers, and cannot be there to run script on our local machine? Surely, there must be a solution to this, and one such solution is Github Actions, which I learned about as an intern at Gainwell Technologies.\nThis post explains Github Actions in a very short, simple to intuit example. Of course, their applications are so vast that I cannot cover everything about them here, but they are still very useful to people who do a repetitive/very similar set of tasks over and over again."
  },
  {
    "objectID": "gitact.html#a-simple-yml-file",
    "href": "gitact.html#a-simple-yml-file",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Github Actions",
    "section": "A Simple yml file",
    "text": "A Simple yml file\nname: City Level Gas Price Scraper\n\non:\n  schedule:\n    - cron: '30 9 * * *'\n  workflow_dispatch:\n\njobs:\n  scrape:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run gas scraper\n      run: |\n        python \"City Scrape/cityscrape.py\"\n\n    - name: Ensure directory exists\n      run: |\n        mkdir -p \"City Scrape/Data/\"\n\n    - name: Commit and push updated CSV to repository\n      run: |\n        git config --global user.name \"GitHub Actions\"\n        git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n        \n        # Check if there are changes before committing\n        if git diff --quiet && git diff --staged --quiet; then\n          echo \"No changes detected, skipping commit.\"\n          exit 0\n        fi\n        \n        git add \"City Scrape/Data/City_*.csv\"\n        git commit -m \"Update gas prices data for $(date +'%Y-%m-%d')\"\n        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\nHere is a yml file we can find in my AAA repo. It begins by naming the action to be performed, which is to scrape some city level gas price data. It is scheduled to run at 9:30 UTC time, or at 4:30 each morning Eastern Standard Time, with the cron time. It may also run whenever I wish for it to run; alternatively, we can specify that some actions run on push to a repo, branch, or even a certain working directory.\nname: City Level Gas Price Scraper\n\non:\n  schedule:\n    - cron: '30 9 * * *'\n  workflow_dispatch:\nActions proceed by defining a set of jobs for the workflow to excecute. In this case, it’s just “scrape”, but you can define more jobs that are interdependent on one another. The job runs on a virtual computer, in this case Ubuntu. Jobs proceeds with a list of steps, or an order that the job proceeds in os the action can function. Step one is to checkout the repo, which essentially just clones the current repo on to the virtual machine.\njobs:\n  scrape:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n\nStep two here is to set up Python, since that’s the language I use, but I’m certain this may be done with R and other langauges (in fact, this entire blog is written in Quarto, which the action must install before working with each post). Note how we specify the version of Python here, too. We then install pip and the requirements that the Python code needs to run the scrape.\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\nNow, we simply run the code, which is no different practically speaking from running the code from our command line. Note that how the file is defined within a driectory, which must be specified if the python file is not at the root (different ways of doing this).\n\n    - name: Run gas scraper\n      run: |\n        python \"City Scrape/cityscrape.py\"\n\nNext, I make the directory for the data if it does not exist.\n\n    - name: Ensure directory exists\n      run: |\n        mkdir -p \"City Scrape/Data/\"\n\nAnd finally, we commit the csv file my code creates to the directory at the repo. We use the Github Actions bot to do the commit. If there are no changes between any of the files before and after committing, we don’t add them and then the job ends (this is what happens if I try to run the action after it’s ran already that day). If not, the files are pushed. In my case, the files are named things like City_2025-01-31.csv. These files are staged, or prepared for being committed, with the addition of the commit message that I’m updating the data for that day. Then we push them to the directory of interest, and then job complete.\n    - name: Commit and push updated CSV to repository\n      run: |\n        git config --global user.name \"GitHub Actions\"\n        git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n        \n        # Check if there are changes before committing\n        if git diff --quiet && git diff --staged --quiet; then\n          echo \"No changes detected, skipping commit.\"\n          exit 0\n        fi\n        \n        git add \"City Scrape/Data/City_*.csv\"\n        git commit -m \"Update gas prices data for $(date +'%Y-%m-%d')\"\n        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\nThe real value of this is not the data I’m scraping (unless you’re a fuel economist/policy scholar). The value is that this job runs independent of my will. I do not have to be at my computer for this to run. I do not need to worry about whether my computer has power or whether I’m home to personally oversee it. The value here is that I’ve manually gotten my computer to do a specific task every single day, the correct way (assuming you’ve coded everything right!!!), every time. Of course, this job is so insignificant such that I did not feel the need to run additional safechecks (say AAA’s site is down, I could have the action restart in 6 hours, or have it curl the website on the hour until it does respond), but obviously you can do plenty more here if the task matters enough. This is also a very partial list of what may be done. You can also place lots of parameters around your actions that may make life easier, or employ pre-commit hooks which can do checks for the quality of the code and other tasks before anything is committed, which will fail if they are not satisfied.\nAlso, it’s worth noting that Actions may run in conjunction with cloud computing for larger-scale jobs. So, if you’re a policy researcher, and your org uses Github but not using Actions for all kinds of process automation tasks, these provide a very useful tool to handle repetitive actions that free up your time to do other things. After all, a key benefit of script is to automate the boring stuff, provided that we’ve automated our tasks correctly."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Here are my blog posts that cover causal inference, econometrics, machine learning, and other data science topics.\n\n\n\n\n\n\n\n\n\nArtificial Counterfactuals in Dense Settings: the \\(\\ell_2\\) relaxer\n\n\n\nCausal Inference\n\nEconometrics\n\n\n\n\n\n\nJan 24, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nData Science for Policy Analysts: A Simple Introduction to Web Scraping\n\n\n\nWeb Scraping\n\nPython\n\n\n\n\n\n\nJan 29, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nData Science for Policy Analysts: A Simple Introduction to Github Actions\n\n\n\nGithub\n\nAutomation\n\n\n\n\n\n\nJan 31, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nOn the Use of Clustering for Synthetic Controls\n\n\n\nCausal Inference\n\nMachine Learning\n\n\n\n\n\n\nFeb 3, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nWhy Data Generating Processes Matter for Causal Infernece\n\n\n\nEconometric Theory\n\nEconometrics\n\nCausal Inference\n\n\n\n\n\n\nFeb 14, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nApplying Forward DID to Construction and Tourism Policy\n\n\n\nCausal Inference\n\nMachine Learning\n\nEconometrics\n\n\n\n\n\n\nFeb 25, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nCausal Inference Runs the World: Actionable Insights, Econometrics Style\n\n\n\nEconometrics\n\nCausal Inference\n\nData Science\n\n\n\n\n\n\nMar 3, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nForward Synthetic Control Estimation\n\n\n\nEconometrics\n\nCausal Inference\n\nData Science\n\n\n\n\n\n\nMar 31, 2025\n\n\nJared Greathouse\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "scdense.html",
    "href": "scdense.html",
    "title": "Artificial Counterfactuals in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "",
    "text": "Plenty of posts have been done in the last decade on the synthetic control method and related approaches. It is a flavor of artificial counterfactual estimator for the panel data setting. Folks from Microsoft, Databricks, Uber, Amazon, Netflix, Gainwell Technologies, and elsewhere have written about/covered it, detailing its implementation, use cases, and econometric theory.\nMany (not all) of these cover the standard SCM, developed originally to study terrorism in the Basque Country and conduct comparative case studies more broadly. Standard SCM tends to favor, under certain technical conditions, a sparse set of control units being assigned weights. These weights aim to reconstruct the factor loadings/observed values of the treated unit, pre-intervention. Sparsity, or the true coefficient vector being mostly 0, has appealing properties; for example, a sparse vector allows us to interpret the synthetic control a lot easier, facilitating the estimation of leave-one-out placebos and other sensitivity checks. In some cases though, the sparsity notion is unfounded.\nThe the \\(\\ell_2\\) panel data approach is an econometric methodology developed by Zhentao Shi and Yishu Wang. The \\(\\ell_2\\)-PDA is a form of synthetic control estimation that accommodates sparse or dense data generation processes. A dense DGP is when the true vector of coefficients is mostly not zero. Sometimes, a sparse model is too simplistic, especially in settings where we have very many predictors. This is especially true when we have lots of multicollinearity among our predictors, which may be very plausible in settings with a lot of control units. The LASSO and the convex hull SCM (for different reasons and in different cases) generally struggle with this, whereas the Ridge or \\(\\ell_2\\)-PDA accomodate multicollinearity as a feature. In this post, I demonstrate the method as implemented in my library mlsynth. The Python code for these results may be found here."
  },
  {
    "objectID": "scdense.html#a-review-of-synthetic-controls",
    "href": "scdense.html#a-review-of-synthetic-controls",
    "title": "Artificial Counterfactuals in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "A Review of Synthetic Controls",
    "text": "A Review of Synthetic Controls\nLet \\(\\mathbb{R}\\) denote the set of real numbers. Denote the natural numbers and unit interval respectively as \\[\n\\mathbb{N} \\coloneqq \\{1, 2, 3, \\dots\\}, \\quad \\mathbb{I} \\coloneqq \\{ w \\in \\mathbb{R} : 0 \\leq w \\leq 1 \\}.\n\\] Let a caligraphic letter, say \\(\\mathcal A\\), denote a descrete set whose cardinality is \\(A=|\\mathcal{A}|\\). The sup norm of a vector \\(\\mathbf{y} \\in \\mathbb{R}^N\\) is defined as the maximum absolute value of its components, \\(\\|\\mathbf{y}\\|_\\infty = \\max_{j = 1, \\ldots, N} |y_j|\\). The floor function of a real number \\(x \\in \\mathbb{R}\\), denoted as \\(\\lfloor x \\rfloor\\), returns \\(\\lfloor x \\rfloor = \\max \\{k \\in \\mathbb{N} : k \\leq x\\}\\). Let \\(t \\in \\mathbb{N}\\) and \\(i \\in \\mathbb{N}\\), represent the indices for \\(T\\) time periods and \\(N\\) units. The pre-treatment period consists of consecutive time periods \\(\\mathcal{T}_1 = \\{1, 2, \\ldots, T_0\\}\\) (cardinality \\(T_1\\)), while the post-treatment period is given by \\(\\mathcal{T}_2 = \\{T_0 + 1, \\ldots, T\\}\\) (cardinality \\(T_2\\)). The treated unit is indexed by \\(i = 1\\), while the remaining set of units, \\(\\mathcal{N}_0 \\coloneqq \\{2, \\ldots, N_0 + 1\\}\\) (cardinality \\(N_0\\)), forms the control group. Each outcome for all units is denoted by \\(y_{it}\\). Denote the outcome vector for the treated unit as \\(\\mathbf{y}_1 \\coloneqq \\begin{bmatrix} y_{11} & y_{12} & \\cdots & y_{1T} \\end{bmatrix}^\\top \\in \\mathbb{R}^T\\), where each entry corresponds to the outcome of the treated unit at time \\(t\\). The donor pool matrix, similarly, is defined as\n\\[\n\\mathbf{Y}_0 = \\begin{bmatrix}\n    y_{21} & y_{22} & \\cdots & y_{2T} \\\\\n    y_{31} & y_{32} & \\cdots & y_{3T} \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    y_{(N_0+1)1} & y_{(N_0+1)2} & \\cdots & y_{(N_0+1)T}\n  \\end{bmatrix} \\in \\mathbb{R}^{N_0 \\times T}.\n\\]\nThe key challenge of causal inference is that we only observe the factual/realized outcome, expressed as:\n\\[\ny_{it} = y_{it}^1 d_{it} + \\left(1 - d_{it}\\right)y_{it}^0.\n\\] Outcomes in this framework are a function of treatment status, \\(d_{it} \\in \\{0, 1\\}\\). While \\(d_{it} = 1\\), a unit is treated and while \\(d_{it} = 0\\) a unit is untreated. Thus, \\(y_{it}^1\\) is the potential outcome under treatment, \\(y_{it}^0\\) is the counterfactual (or potential) outcome under no treatment. The objective is to estimate the counterfactual outcomes \\(y_{1t}^0\\). SCMs and panel data approaches are weighting based estimators. In this setup, some weight vector \\[\n\\mathbf{w} \\coloneqq \\begin{bmatrix} w_2 & w_3 & \\cdots & w_{N_0+1} \\end{bmatrix}^\\top, \\: \\text{where } w_i \\: \\forall \\: i \\in \\mathcal{N}_0.\n\\] is assigned across the \\(N_0\\) control units to approximate the treated unit’s pre-intervention outcome. SCM solves for \\(\\mathbf{w}\\) via the optimization:\n\\[\n\\underset{\\mathbf{w} \\in \\mathbb{I}^{N_0}}{\\operatorname*{argmin}} \\lVert \\mathbf{y}_1 - \\mathbf{w}^\\top \\mathbf{Y}_0 \\rVert_2^2,  \\: \\forall \\: t \\in \\mathcal{T}_{1}, \\: \\text{subject to } \\lVert \\mathbf{w} \\rVert_1 = 1.\n\\]\nHere, \\(\\mathbf{w}^\\top \\mathbf{Y}_0\\) represents the dot product of predictions, also known as a weighted average. The constraint of the convex hull disallows extrapolation of any form. SCMs are predicated on good pretreatment fit, such that \\(\\mathbf{w}^\\top \\mathbf{Y}_0 \\approx \\mathbf{y}_1\\). Speaking generally, the better pre-treatment fit we have over a long time series, the better the out-of-sample predictions will be for the synthetic control."
  },
  {
    "objectID": "scdense.html#selecting-tau",
    "href": "scdense.html#selecting-tau",
    "title": "Artificial Counterfactuals in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "Selecting \\(\\tau\\)",
    "text": "Selecting \\(\\tau\\)\nCritical to \\(\\ell_2\\)-PDA is the selection of tau. The reason for this is because while \\(\\tau \\to 0\\), the estimator converges to OLS, which we know will overfit to the pre-intervention data in most cases unless the data are exactly low-rank and fully observed. Too high a value of \\(\\tau\\) results in drastic underfitting (trust me) of the pre-treatment data. The way mlsynth tunes tau is by cross-validation over the pre-treatment period. mlsynth invokes a log-space over the interval \\(\\tau \\in \\left[ 10^{-4}, \\tau_{\\text{init}} \\right]\\), where \\(\\tau_{\\text{init}} = \\|\\boldsymbol{\\eta}\\|_\\infty\\). These correspond to the values of tau we supply. We first create a training and validation period, \\(\\mathcal{T}_1 = \\mathcal{T}_1^{\\text{train}} \\cup \\mathcal{T}_1^{\\text{val}}, \\quad\n\\mathcal{T}_1^{\\text{train}} \\cap \\mathcal{T}_1^{\\text{val}} = \\emptyset.\\) Denote the training series as \\(\\mathcal{T}_1^{\\text{train}} = \\{1, 2, \\ldots, k\\}\\). Denote the validation series as \\(\\mathcal{T}_1^{\\text{val}} = \\{k+1, \\ldots, T_0\\}\\), where \\(k = \\left\\lfloor \\frac{T_1}{2} \\right\\rfloor\\). We then estimate the model for the training period, and compute our predictions from \\(\\{k+1, \\ldots, T_0\\}\\). The tau we select is\n\\[\\begin{aligned}\n\\tau^{\\ast} = \\operatorname*{argmin}_{\\tau} \\left( \\frac{1}{|\\mathcal{T}_1^{\\text{val}}|} \\| \\mathbf{y}^{\\ell_2} - \\mathbf{y}_1 \\|_2^2 \\right),\n\\end{aligned}\\]\nor the one that minimizes the validation Root Mean Squared Error. The performance is pretty close to what Zhentao and Yishu do for their empirical example (see the code at the documentation). In the original paper, they do a 70-30 train test split over the pre-intervention period, where they take the first 70% of the pre-treatment data and supply some values of tau.\nOkay hard part done. Let’s apply this to a real-life example, shall we?"
  }
]