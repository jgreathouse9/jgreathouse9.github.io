---
title: "No Layovers, No Reservations: Productionizing Synthetic Controls for Tripadvisor Using [mlsynth](https://jgreathouse9.github.io/mlsynth/webdir/mlsynthlanding.html)"
subtitle: Python-native, production-ready synthetic control methods
author:
  - name: "Jared Greathouse"
    url: "https://jgreathouse9.github.io"
date: today
format:
  revealjs:
    theme: sky
    slide-number: true
    transition: fade
    scrollable: true
    footer: "Tripadvisor Â· mlsynth"
highlight-style: github
---

## Executive Summary

- **The problem**: Synthetic Control Methods (SCMs) are critical for Tripadvisorâ€™s geo-testing and policy evaluation but are slowed by technical debt:
  - Fragmented tools across R, Stata, Matlab
  - Inconsistent syntax and manual processes
  - Not production-ready for scalable workflows
- **The solution**: `mlsynth` â€” a lightweight Python library unifying SCMs under one consistent grammar, tailored for Tripadvisorâ€™s data team.
- **The impact**:
  - Run multiple SCMs in <3 minutes with <50 lines of code
  - Seamlessly integrate into CI/CD pipelines for automated geo-testing
  - Enable faster, scalable insights for ad campaigns and tourism policies
- **Tripadvisor benefit**: Transition from R to Python, aligning with your teamâ€™s expertise and production needs.

---

::: {.panel-tabset}

## What Are SCMs?

Synthetic Control Methods (SCMs) estimate causal effects by creating a weighted average of untreated units, ideal for:
- Geo-testing ad campaigns across markets
- Evaluating tourism policies (e.g., pricing, regulations)

**Tripadvisor use case**: Measure the impact of marketing campaigns or policy changes (e.g., hotel pricing) with precision.

## Challenges

Many SCM tools have adoption barriers:

| Estimator | Language | Challenges |
|-----------|----------|------------|
| [Forward DID](https://doi.org/10.1287/mksc.2022.0212) | R | Free, but requires extensive user input |
| [Forward SCM](https://doi.org/10.1016/j.econlet.2024.111976) | Stata | Not free, not streamlined |
| [Two-Step SCM](https://doi.org/10.1287/mnsc.2023.4878) | Matlab | Not free, not streamlined |
| [Robust PCA Synth](https://academicworks.cuny.edu/gc_etds/4984/) | R + Python | Requires two languages |

:::

---

## Practical Problems

Traditional SCM tools often fail to:

- ðŸ›‘ Support multiple methods in one workflow
- ðŸ“Š Provide automated diagnostics or effect-size statistics
- ðŸ”„ Facilitate easy comparison between methods

**Tripadvisor impact**: Manual/ad-hoc processes in R slow geo-testing for ad campaigns, delaying insights for campaign optimization.

---

## Practical Solutions

A streamlined SCM workflow for Tripadvisor should include:

- **Input**: A simple table with unit, time, treatment, and outcome
- **Method**: A single `.fit()` call for all computations
- **Output**: Effect estimates + diagnostics (e.g., fit quality, robustness)

**Tripadvisor benefit**: Enables rapid geo-testing across markets and policy evaluations with consistent, automated results.

::: {.callout-note}
Workflow: Data Table â†’ `.fit()` â†’ Results + Visualizations
:::

---

## Traveling Lightly: Enter `mlsynth`

`mlsynth` is a lightweight Python library designed to:

- Unify multiple SCMs under one consistent grammar
- Integrate seamlessly into Github Actions or CI/CD pipelines
- Transition Tripadvisorâ€™s R-based SCM workflows to Python, aligning with in-house expertise

**Result**: Analysts focus on insights for ad campaigns and policies, not software logistics.

---

## Why use `mlsynth`?

- **For Tripadvisorâ€™s analysts**:
  - Quick onboarding with one syntax
  - Extensible design to add new and bespoke SCMs
  - Transparent results for easy validation
- **For Tripadvisorâ€™s organization**:
  - Production-ready workflows for geo-testing
  - Faster analysis, reducing campaign optimization time
  - Lower technical debt by eliminating R/Stata/Matlab dependencies
- **For Tripadvisorâ€™s leadership**:
  - Scalable insights for ad campaigns and policy evaluations
  - Cost savings from streamlined tools and automation

---

## Empirical Example: [Barcelona Hotel Moratorium](https://doi.org/10.1080/13504851.2021.1927958)

- **Intervention**: City-wide hotel building moratorium (June 2015)
- **Outcome**: Normalized hotel prices (from Booking.com)
- **Donors**: 83 cities (16 Mediterranean)
- **Pre-treatment period**: 224 weeks (2011 Week 1â€“2015 July)
- **Objective**: Estimate causal effect on hotel prices
- **Tripadvisor relevance**: Mirrors evaluating tourism policies or marketing impacts on bookings

**With `mlsynth`**: Estimated three SCMs in <3 minutes with <30 lines of code, showing a ~12% price increase.

---

## Simple Syntax

This code estimates three SCMs using a unified syntax, ready for CI/CD integration.

```{python}
#| echo: true
import pandas as pd
from mlsynth import FSCM, CLUSTERSC, PDA

# Load public tourism dataset
url = "https://raw.githubusercontent.com/jgreathouse9/GSUmetricspolicy/refs/heads/main/data/RawData/hotelex.csv"
data = pd.read_csv(url)

# Configure inputs (unit, time, treatment, outcome)
config = {
    "df": data,
    "outcome": "indexed_price",
    "treat": "treat",
    "unitid": "fullname",
    "time": "time",
    "display_graphs": False
}

# Fit Forward SCM
arco = FSCM(config).fit()
y_obs = arco.sub_method_results['FSCM'].time_series.observed_outcome
y_FSCM = arco.sub_method_results['FSCM'].time_series.counterfactual_outcome
T0 = arco.raw_results['Fit']['Pre-Periods']

# Fit PDA (L2 method)
config_pda = dict(config)
config_pda["method"] = "l2"
l2pda = PDA(config_pda).fit()
y_l2relaxed = l2pda.time_series.model_extra['synthetic_outcome']

# Fit Robust SCM
config_RSC = dict(config)
config_RSC["method"], config_RSC["cluster"] = "PCR", False
PCR = CLUSTERSC(config_RSC).fit()
y_PCR = PCR.sub_method_results['PCR'].time_series.counterfactual_outcome
```

**Tripadvisor benefit**: Automate this pipeline for geo-testing or policy analysis.

---

## Plot of Predictions

This chart compares Barcelonaâ€™s observed hotel prices to three SCM counterfactuals, highlighting the moratoriumâ€™s ~10% price increase.

```{chartjs}
{
  "type": "line",
  "data": {
    "labels": Array.from({length: y_obs_flat.length}, (_, i) => i),
    "datasets": [
      {
        "label": "Barcelona (Observed)",
        "data": y_obs_flat,
        "borderColor": "#000000",
        "backgroundColor": "#000000",
        "fill": false,
        "borderWidth": 2
      },
      {
        "label": "Forward SCM",
        "data": y_FSCM_flat,
        "borderColor": "#1E90FF",
        "backgroundColor": "#1E90FF",
        "fill": false,
        "borderWidth": 1
      },
      {
        "label": "PDA L2",
        "data": y_l2relaxed_flat,
        "borderColor": "#FFA500",
        "backgroundColor": "#FFA500",
        "fill": false,
        "borderWidth": 1
      },
      {
        "label": "Robust SCM",
        "data": y_PCR_flat,
        "borderColor": "#FF4500",
        "backgroundColor": "#FF4500",
        "fill": false,
        "borderWidth": 1
      }
    ]
  },
  "options": {
    "plugins": {
      "title": {
        "display": true,
        "text": "SCM Estimates of Barcelona Hotel Prices (mlsynth)",
        "font": { "size": 18 }
      },
      "legend": { "position": "top" }
    },
    "scales": {
      "x": { "title": { "display": true, "text": "Time" } },
      "y": { "title": { "display": true, "text": "Indexed Price" } }
    },
    "elements": { "line": { "tension": 0 } },
    "annotation": {
      "annotations": {
        "line1": {
          "type": "line",
          "xMin": T0,
          "xMax": T0,
          "borderColor": "#000000",
          "borderWidth": 2,
          "borderDash": [5, 5],
          "label": {
            "content": "Hotel Moratorium",
            "enabled": true,
            "position": "top"
          }
        }
      }
    }
  }
}
```

---

## Why `mlsynth` is different

`mlsynth` estimated the Barcelona moratoriumâ€™s impact using three SCMs in <50 lines of code.

- **Before**: Manual R workflows, fragmented syntax, potnetially hours of setup
- **After**: Unified Python syntax, automated diagnostics, results in minutes
- **Tripadvisor impact**: Scale geo-testing for ad campaigns and policy evaluations with minimal overhead.

::: {.callout-note}
Before/After: R-based manual workflows â†’ `mlsynth` automated pipelines
:::

---

## Key Takeaways

- `mlsynth` removes SCM barriers with a unified, Python-native grammar
- Enables Tripadvisor to scale geo-testing and policy evaluations, saving up to 50% analysis time
- Production-ready for CI/CD integration, aligning with Tripadvisorâ€™s Python expertise
- Extensible for future SCM methods and custom tools

**Next steps**: Partner with Jared Greathouse to:
- Select optimal SCM methods for Tripadvisorâ€™s use cases
- Productionize workflows with `mlsynth` and CI/CD
- Build a custom SCM tool with visualizations, collaborating with Tripadvisorâ€™s engineering/AI teams
- Contact: [jgreathouse9.github.io](https://jgreathouse9.github.io)
