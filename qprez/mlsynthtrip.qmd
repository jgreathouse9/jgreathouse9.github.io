---
title: "No Layovers, No Reservations: Productionizing Synthetic Controls for Tripadvisor Using [MLSYNTH](https://jgreathouse9.github.io/mlsynth/webdir/mlsynthlanding.html)"
subtitle: Python-native, production-ready synthetic control methods
author:
  - name: "Jared Greathouse"
    url: "https://jgreathouse9.github.io"
date: today
format:
  revealjs:
    theme: moon
    slide-number: true
    transition: fade
    scrollable: true
    footer: "Tripadvisor · MLSYNTH"
highlight-style: github
---

## Executive Summary

- **The problem:** Synthetic Control Methods (SCMs) are powerful for causal analysis, but practical use is blocked by technical debt:  
  - Different methods in different languages (R, Stata, Matlab)  
  - Inconsistent syntax  
  - Not production-ready  

- **The solution:** `mlsynth` — a lightweight Python library that unifies SCMs under one consistent grammar.  

- **The impact:**  
  - Analysts can estimate and compare multiple SCMs in under 3 minutes and <50 lines of code  
  - Seamless integration into CI/CD workflows  
  - Faster, cleaner, and more scalable causal analysis — no need for multiple languages or tools.  


::: {.panel-tabset}

## Synthetic Control Methods

SCMs are widely used to measure the causal effect of public policy changes or marketing interventions.

However, many modern SCMs are *practically* hard to use due to technical debt.

## Examples

Many new and useful SCM methods have serious adoption barriers — different languages, different syntax, and not production-ready.

| Estimator                                                        | Public Code? | Language   | Production-Ready?               |
| ---------------------------------------------------------------- | ------------ | ---------- | ------------------------------- |
| [Forward DID](https://doi.org/10.1287/mksc.2022.0212)            | ✅          | R          | ❌ Free, but needs lots of user input. |
| [Forward SCM](https://doi.org/10.1016/j.econlet.2024.111976)     | ⚠️ Limited   | Stata      | ❌ Not free, not streamlined    |
| [Two-Step SCM](https://doi.org/10.1287/mnsc.2023.4878)           | ✅            | Matlab     | ❌ Not free, not streamlined   |
| [Robust PCA Synth](https://academicworks.cuny.edu/gc_etds/4984/) | ❌            | R + Python | ❌ Need to know two softwares.              |



:::


---

## Practical Problems

Standard SCM packages often fail to:

- Handle multiple methods seamlessly
- Provide diagnostics or effect-size statistics automatically
- Allow easy comparison between methods

**Impact:** These barriers slow down analysis, create bottlenecks for decision-making, and increase costs of adoption.

Ideally, we should have a simple, unified grammar:

- Input: long `pandas.DataFrame`, with one column for the unit (string), time, treatment (dummy variable =1 if and when a unit is treated), outcome
- Output: effect estimates + diagnostics
- One `.fit()` method.


---

## Traveling Lightly: Enter `mlsynth`

In response to these constraints, I developed `mlsynth`. 

- A lightweight Python library with many machine learning based SCMs. Each class relies on a single grammar.
- Easily integrated into Github Actions or other CI/CD workflows.

**Result:** Analysts can focus on insights, not software logistics.

---

## Why use `mlsynth`?

- **For teams:**  
  - Quick onboarding  
  - One consistent syntax across methods  
  - No need to learn R, Stata, or Matlab  

- **For organizations:**  
  - Production-ready workflows  
  - Seamless integration with CI/CD pipelines  
  - Lower technical debt, faster iteration  

- **For analysts:**  
  - Extensible, transparent design  
  - Easy to add new estimators without rewriting pipelines  


---

## Empirical Example: [Barcelona Hotel Moratorium](https://doi.org/10.1080/13504851.2021.1927958)

- **Intervention:** City-wide hotel building moratorium  
- **Outcome:** Normalized hotel prices over time, derived from Booking.com  
- **Donors:** 83 cities (16 Mediterranean)  
- **Pre-treatment period:** 224 weeks (2011 Week 1–2015 July)  
- **Objective:** Compare multiple SCM approaches to estimate the causal effect  

**With `mlsynth`:** Accomplished seamlessly in under 3 minutes and <30 lines of code.


---


## Simple Syntax

```{python}

#| echo: true

import pandas as pd
from mlsynth import FSCM, CLUSTERSC, PDA

url = "https://raw.githubusercontent.com/jgreathouse9/GSUmetricspolicy/refs/heads/main/data/RawData/hotelex.csv"
data = pd.read_csv(url)
# base config
config = {
    "df": data,
    "outcome": "indexed_price",
    "treat": "treat",
    "unitid": "fullname",
    "time": "time",
    "display_graphs": False
}

arco = FSCM(config).fit()

y_obs = arco.sub_method_results['FSCM'].time_series.observed_outcome
y_FSCM = arco.sub_method_results['FSCM'].time_series.counterfactual_outcome

T0 = arco.raw_results['Fit']['Pre-Periods'] # number of pre intervention periods


config_pda = dict(config)
config_pda["method"] = "l2"

l2pda = PDA(config_pda).fit()

y_l2relaxed = l2pda.time_series.model_extra['synthetic_outcome']

config_RSC = dict(config)

config_RSC["method"], config_RSC["cluster"]= "PCR", False

PCR = CLUSTERSC(config_RSC).fit()


y_PCR = PCR.sub_method_results['PCR'].time_series.counterfactual_outcome


```

## Plot of Predictions

This plot shows the observed series for Barcelona alongside three counterfactual estimates.

```{python}


import matplotlib.pyplot as plt
import numpy as np

# Flatten all arrays
y_obs_flat = np.ravel(y_obs)
y_FSCM_flat = np.ravel(y_FSCM)
y_l2relaxed_flat = np.ravel(y_l2relaxed)
y_PCR_flat = np.ravel(y_PCR)

time_index = np.arange(len(y_obs_flat))

plt.plot(time_index, y_obs_flat, label="Barcelona (Observed Unit)", color="black", linewidth=2)
plt.plot(time_index, y_FSCM_flat, label="Forward SCM", color="blue")
plt.plot(time_index, y_l2relaxed_flat, label="PDA L2", color="orange")
plt.plot(time_index, y_PCR_flat, label="Robust SCM", color="red")

# Mark treatment
plt.axvline(x=T0, color="black", linestyle="--", label="Hotel Moratorium")

plt.xlabel("Time")
plt.ylabel("Indexed Price")
plt.title("Comparison of SCM Estimators (mlsynth)")
plt.legend()
plt.show()

```

## Why `mlsynth` is different

We estimated the causal impact of Barcelona's hotel moratorium using three different methods with under 50 lines of code.  

- Common syntax allows switching SCMs without retraining analysts  
- Counterfactual estimates can be compared, averaged, or extended with minimal effort  
- Entirely Python-native, no cross-language dependency  

**In short:** Faster, more reliable causal analysis with dramatically lower overhead.

---

## Key Takeaways

- `mlsynth` removes major barriers to using modern SCMs  
- Unified grammar = faster, cleaner workflows  
- All methods are Python-native and production-ready  
- Extensible design supports rapid experimentation  

**Bottom line:** `mlsynth` delivers causal insights faster, with fewer resources, and without the delays of switching tools or languages.  
