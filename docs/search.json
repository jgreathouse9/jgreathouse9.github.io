[
  {
    "objectID": "aaascrape.html",
    "href": "aaascrape.html",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Web Scraping",
    "section": "",
    "text": "In academia, lots of the datasets we tend to work with come in pretty csv files. And while that’s great… oftentimes, in modern policy data science, the data we seek are unstructured in the sense that they do not come from a specific file such as a .csv file or Stata dataset. Such data must be web-scraped, or the process of gathering unstructured data, via reproducible script.\nThis post simply seeks to present a simple use case of web-scraping in the setting the applied policy scientist might need for certain tasks. Say we wish to gather the price of gas from AAA, across each metro area in the nation. In the old days, we’d need to ask AAA and pay thousands of dollars for an extended time series… but now we don’t need to, at least for this case. The reason is because we have Python, and we are able to leverage its basic features to collect these data via exploiting the publicly available information they provide us."
  },
  {
    "objectID": "aaascrape.html#the-scrape",
    "href": "aaascrape.html#the-scrape",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Web Scraping",
    "section": "The Scrape",
    "text": "The Scrape\nHere is the code for scrape. These are the helpers that we get one function to call. This is the nitty-gritty that calls and collects the data of interest.\n\nimport requests\nfrom bs4 import BeautifulSoup\nimport pandas as pd\nfrom dateutil.relativedelta import relativedelta\n\n\ndef fetch_gas_prices(state_abbreviations):\n    \"\"\"\n    Fetches and processes gas price data for multiple states and their respective cities.\n\n    This function scrapes the AAA Gas Prices website to collect gas prices for different fuel grades\n    (Regular, Mid-Grade, Premium, Diesel) in various cities within the specified states. The collected\n    data is then structured into a pandas DataFrame.\n\n    Parameters:\n    -----------\n    state_abbreviations : dict\n        A dictionary mapping state names to their respective abbreviations, e.g.,\n        {\"California\": \"CA\", \"Texas\": \"TX\"}.\n\n    Returns:\n    --------\n    pd.DataFrame\n        A DataFrame containing gas prices with columns:\n        ['Date', 'State', 'City', 'Regular', 'Mid-Grade', 'Premium', 'Diesel']\n    \"\"\"\n\n    headers = {\n        \"user-agent\": \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 \"\n        \"(KHTML, like Gecko) Chrome/131.0.0.0 Safari/537.36\",\n    }\n\n    today = pd.Timestamp.today()\n    time_mapping = {\n        \"Current Avg.\": lambda: today,\n        \"Yesterday Avg.\": lambda: today - pd.Timedelta(days=1),\n        \"Week Ago Avg.\": lambda: today - pd.Timedelta(weeks=1),\n        \"Month Ago Avg.\": lambda: today - relativedelta(months=1),\n        \"Year Ago Avg.\": lambda: today - relativedelta(years=1),\n    }\n\n    def extract_gas_prices(row, time_mapping, today, state, city_name):\n        \"\"\"\n        Extracts and processes gas price data from a single row in the gas price table.\n\n        Parameters:\n        -----------\n        row : bs4.element.Tag\n            A BeautifulSoup object representing a table row (&lt;tr&gt;) containing gas prices.\n        time_mapping : dict\n            A dictionary mapping AAA's time labels (e.g., \"Current Avg.\") to corresponding dates.\n        today : pd.Timestamp\n            The current date, used as a fallback if no valid time label is found.\n        state : str\n            The full name of the state (e.g., \"California\").\n        city_name : str\n            The name of the city corresponding to the extracted gas prices.\n\n        Returns:\n        --------\n        list\n            A list containing extracted data in the format:\n            [date (str), state (str), city (str), regular (str), mid-grade (str), premium (str), diesel (str)]\n        \"\"\"\n\n        cells = row.find_all(\"td\")\n        date_text = cells[0].get_text(strip=True)\n\n        # Get the corresponding date using time_mapping, defaulting to today\n\n        date = time_mapping.get(date_text, lambda: today)().strftime(\"%Y-%d-%m\")\n\n        # Extract prices, removing the dollar sign\n\n        prices = [cell.get_text(strip=True).replace(\"$\", \"\") for cell in cells[1:]]\n\n        return [date, state, city_name] + prices\n\n    def process_city_data(city, time_mapping, today, state):\n        \"\"\"\n        Extracts gas price data for a specific city by locating its corresponding table.\n\n        Parameters:\n        -----------\n        city : bs4.element.Tag\n            A BeautifulSoup object representing a city's heading element.\n        time_mapping : dict\n            A dictionary mapping time labels to actual date values.\n        today : pd.Timestamp\n            The current date used for fallback mapping.\n        state : str\n            The full name of the state.\n\n        Returns:\n        --------\n        list\n            A list of lists, where each inner list contains gas price data for a specific date in the format:\n            [date, state, city, regular, mid-grade, premium, diesel]\n        \"\"\"\n\n        city_name = city.get_text(strip=True)\n        rows = city.find_next(\"table\").select(\"tbody tr\")\n\n        return [\n            extract_gas_prices(row, time_mapping, today, state, city_name)\n            for row in rows\n        ]\n\n    def process_states(state_abbreviations, headers, time_mapping, today):\n        \"\"\"\n        Iterates through all states, sending requests to fetch and process gas price data.\n\n        Parameters:\n        -----------\n        state_abbreviations : dict\n            A dictionary mapping state names to their respective abbreviations.\n        headers : dict\n            HTTP request headers to mimic a real browser and avoid request blocking.\n        time_mapping : dict\n            A dictionary mapping AAA's date labels to actual date values.\n        today : pd.Timestamp\n            The current date used for fallback mapping.\n\n        Returns:\n        --------\n        list\n            A list of lists containing processed gas price data for all states in the format:\n            [date, state, city, regular, mid-grade, premium, diesel]\n        \"\"\"\n\n        all_data = []\n        for state, abbreviation in state_abbreviations.items():\n            params = {\"state\": abbreviation}\n            response = requests.get(\n                \"https://gasprices.aaa.com/\", params=params, headers=headers\n            )\n\n            if response.status_code != 200:\n                print(\n                    f\"Error fetching data for {state}. Status code: {response.status_code}\"\n                )\n                continue\n            soup = BeautifulSoup(response.content, \"html.parser\")\n\n            # Extract city sections\n\n            cities = soup.select(\".accordion-prices.metros-js &gt; h3[data-title]\")\n            all_data.extend(\n                [\n                    row_data\n                    for city in cities\n                    for row_data in process_city_data(city, time_mapping, today, state)\n                ]\n            )\n        return all_data\n\n    # Fetch and process data for all states\n\n    all_data = process_states(state_abbreviations, headers, time_mapping, today)\n\n    # Convert list of extracted data into a pandas DataFrame\n\n    all_data_df = pd.DataFrame(\n        all_data,\n        columns=[\"Date\", \"State\", \"City\", \"Regular\", \"Mid-Grade\", \"Premium\", \"Diesel\"],\n    )\n\n    # Convert 'Date' to datetime format\n\n    all_data_df[\"Date\"] = pd.to_datetime(all_data_df[\"Date\"], format=\"%Y-%d-%m\")\n\n    # Sort by 'State', 'City', and 'Date' for better organization\n\n    all_data_df = all_data_df.sort_values(by=[\"State\", \"City\", \"Date\"]).reset_index(\n        drop=True\n    )\n\n    return all_data_df\n\nWe first define AAA’s website as the URL of interest, Then, we inspect the URL for each state where the actual data for each city/metro is located at. For Massachusetts, the URL is “https://gasprices.aaa.com/?state=MA”. For Florida, the URL is “https://gasprices.aaa.com/?state=FL”. See the pattern? There’s a common prefix, with the only thing changing being the suffix of which is the abbreviation of the state.\nThe master function is fetch_gas_prices. This simply accepts a dictionary of state abbreviations (the value) paired with the key (the state name) we shall query over. We, within this function, define a common time mapping which AAA uses to stnadardize dates, and specify the current date.\nNext I use Python’s requests library to query each state (plenty of ways to do this step, but requests is generally the quickest for simple and even fairly big jobs). I then process each state with the process_states function. This accepts a list of states, headers, the common time mapping, and the current date. We then query each state, and clean the accordion-style tables that we see towards the bottom of the page. We clean them for each city/each metro area with the process_city_data function. Then append all of them into a single dataframe for each state, moving on to the next state after we’ve axhausted all metros for that state. Finally we appened the state dataframes together, where we have the date, the prices of gas, the state, and the city name all in one place."
  },
  {
    "objectID": "aaascrape.html#the-call",
    "href": "aaascrape.html#the-call",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Web Scraping",
    "section": "The Call",
    "text": "The Call\nWe may then call this whole script with a few lines of python code.\n\nimport pandas as pd\nfrom datetime import datetime\nfrom cityutils import fetch_gas_prices\nimport os\n\n# We just need the state abbreviations since\n# AAA indexes their states by the abbreviation.\n\nurl = \"https://raw.githubusercontent.com/jasonong/List-of-US-States/refs/heads/master/states.csv\"\n\n# We read the csv into a df\nstates_df = pd.read_csv(url)\n\n# Here is the main function that does the scrape.\ndf = fetch_gas_prices(dict(zip(states_df['State'], states_df['Abbreviation'])))\n\n# Format the date for the filename\ndate_str = datetime.now().strftime(\"%Y-%m-%d\")\n\n# Ensure the output directory exists\noutput_dir = \"./City Scrape/Data\"\nos.makedirs(output_dir, exist_ok=True)\n\n# Save the DataFrame as \"/City Scrape/Data/City_{date}.csv\"\noutput_path = f\"{output_dir}/City_{date_str}.csv\"\ndf.to_csv(output_path, index=False)\n\nThis pulls everything together in a single dataframe ans saves it in a csv file. Notice that the data are collected from today, yesterday, last week, last month, and last year. Meaning, in theory, we have at least a year’s worth of prior data to collect, assuming we collected this data for a year.\nThis a simple case of web scraping. I’ve done more complicated scrapes, such as scraping the prices of goods across every Whole Foods in the country across 5 different departments per store. The scale of the job and the size of the data is much bigger, but the principles are overall the same. In the future, I will write more posts that demonstrate different applications of web-scraping and how policy scientists may use them. In particular, I will cover how scraping can go hand in hand with GitHub Actions. In my experience so far as a PHD student, these two alone (scraping and Github Actions) has made my life as a researcher far easier than otherwise."
  },
  {
    "objectID": "acene.html",
    "href": "acene.html",
    "title": "Data Science for Policy Analysts: On Importance of Data Generating Processes",
    "section": "",
    "text": "I just began my dissertation last week. The first chapter studies the causal impact of Texas’ repeal of the tampon tax on demand as well as consumer price savings, naturally, using synthetic control methods as one may have guessed. I was doing the literature review, my favorite part of the research process, and upon doing some digging, I had to write a post about this.\nI found a paper called “Why current menstrual policies do not work”. Much of the framing of the paper is fine, until we get to the part about evidence regarding the tampon tax. King writes\n\nSimilarly, a recent UK campaign to abolish a 5% ‘tampon tax’ unintentionally boosted the profits of disposable product manufacturers by about £15 million per year, without substantially reducing the cost of products for consumers,\n\nciting this paper by Tax Policy Associates, with the web version being at this link. I read this and though “Hmm, this is an empirical claim, I wonder what their causal methodology was. So I went to look the paper up as a bit of professional curiosity.\nThe paper studies the pass through rate of abolishing the tax on savings to consumers. To quote the paper directly,\n\nWe used Office for National Statistics data to analyse tampon price changes around 1 January 2021, the date that the “tampon tax” was abolished. We were able to do this because the ONS includes tampons (but not other menstrual products) in the price quotes it samples every month to compile the consumer prices index. Since 2017, the ONS has published the full datasets for its price sampling.\n\nOkay fine. No problems so far. The euthors find “Overall, the average price for [tampons in] the period after the VAT abolition is about 1.5% less than it was beforehand.” Still no issues so far. But then we check the methodology, that they link to at their Github, and the results were less than exciting, putting it politely. Why? The authors do a simple t-test. That is, a simple pre-post test which compares the mean difference of tampon prices before the abolition of the tax and after the abolition of the tax. Precisely, they write\n\nApply [sic] statistical techniques to these datasets is not straightforward given the limited number of datapoints and very high degree of volatility. It was, however, thought appropriate to run an unequal variance one-sided t-test (using the python SciPy library) to compare the pricing datasets for the six months before 1 January 2021 with those for the subsequent six months.\n\nAppropriate? By who? Who said this was a good idea? Look, I knmow that real data are often messy and that we have to take steps to compensate for noise, corruption, and overall lack of cleanliness, but I want to be clear about something: no matter what the extant difficulties are, this is not at all the correct way to do things, and the point of this post is to explain why. To really understand what’s wrong here, we have to go back to basic causal inference and discuss data generating processes.\n\n\n\n\nFor DID, the DGP for the outcome \\(y_{jt}\\) is usually assumed to follow a two-way fixed effects model\n\\[\ny_{jt} = \\boldsymbol{\\lambda}_j^\\top \\boldsymbol{\\delta}_t + \\boldsymbol{\\epsilon}_{jt}\n\\]\nwhere we have \\(\\boldsymbol{\\lambda}_j = \\begin{bmatrix} a_j \\\\ 1 \\end{bmatrix} \\in \\mathbb{R}^2\\) represents the unit-specific fixed effects, with \\(a_j\\) being the fixed effect for unit \\(j\\) and \\(\\boldsymbol{\\delta}_t = \\begin{bmatrix} 1 \\\\ b_t \\end{bmatrix} \\in \\mathbb{R}^2\\) represents the time-specific fixed effects, with \\(b_t\\) being the fixed effect for time \\(t\\). This simplifies to the outcomes being generated by a simple additive unit effect and time effect. It does not permit heterogeneous effects. In practice, DID is estimated via the OLS speciofication \\(y_{1t}=\\hat\\alpha_{\\mathcal{N}_0}+ \\bar{y}_{\\mathcal{N}_0t} \\: t \\in \\mathcal{T}_1\\), where \\(\\bar{y}_{\\mathcal{N}_0t}\\coloneqq \\frac{1}{N_0} \\sum_{j \\in \\mathcal{N}_0} y_{jt}\\). The estimated least-squares intercept is computed like \\(\\hat\\alpha_{\\mathcal{N}_0} \\coloneqq T_{1}^{-1}\\sum_{t \\in \\mathcal{T}_{1}}\\left(y_{1t}-\\bar{y}_{\\mathcal{N}_0t}\\right)\\). What we take away from this setup is that we do not require the paths of the treated units and control group to be the same. We just require that they be parallel to each other in the pre-intervention period on the hopes that absent the treatment, they would evolve similarly absent treatment, with the additional assumption of no anticipation and SUTVA. We can even express this with expectations, as is usually done. Parallel trends requires that, in the absence of treatment ((d_jt = 0) for treated units), the difference in outcomes between the treated and control groups would follow a parallel trend. This can be expressed as:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_jt = 1] - \\mathbb{E}[y_{jt} \\mid d_jt = 0] = \\mathbb{E}[\\boldsymbol{\\lambda}_j^\\top \\boldsymbol{\\delta}_t] \\quad \\text{for all } t\n\\]\nAll we’re saying here is that the difference between our observed outcomes and our control group outcomes should be equvalent to the additive factor model we just specified. Now, we may substitute the scalar interpretation of this into this, giving us:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 1] = a_j + b_t + \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]\n\\] which is simply the factor model for the treated unit and \\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 0] = a_j + b_t + \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]\n\\] is the same for the control units. Thus, the difference between the treated and control groups’ expected outcomes, in the absence of treatment, should be:\n\\[\n\\mathbb{E}[y_{jt} \\mid D_j = 1] - \\mathbb{E}[y_{jt} \\mid D_j = 0] = \\left(a_j + b_t + \\mathbb{E}[\\epsilon_{jt} \\mid D_j = 1]\\right) - \\left(a_j + b_t + \\mathbb{E}[\\epsilon_{jt} \\mid D_j = 0]\\right)\n\\]\nNotice that the unit-specific fixed effect (a_j) and the time-specific fixed effect (b_t) cancel out, as they are the same for both treated and control groups. This leaves us with:\n\\[\n\\mathbb{E}[y_{jt} \\mid D_j = 1] - \\mathbb{E}[y_{jt} \\mid D_j = 0] = \\mathbb{E}[\\epsilon_{jt} \\mid D_j = 1] - \\mathbb{E}[\\epsilon_{jt} \\mid D_j = 0]\n\\]\nFor the parallel trends assumption to hold, this difference should be constant over time, implying that:\n\\[\n\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1] - \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0] = \\text{constant } \\forall \\, t\n\\]\nOr, that conditional only on some error term, the difference is constant with respect to both the treated and untreated groups.\n\n\n\nWe can do the exact same thing with the t-test too. In the pre-treatment period, the expected outcome for unit \\(j\\) is:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 0] = \\mathbb{E}[\\lambda_j + \\epsilon_{jt} \\mid d_{jt} = 0]\n\\]\nSince \\(\\lambda_j\\) is constant, the expected outcome simplifies to:\n\\[\n\\color{red}\\mathbb{E}[y_{jt} \\mid d_{jt} = 0] = \\lambda_j + \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]\n\\]\nSimilarly, in the post-treatment period, the expected outcome for unit \\(j\\) is:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 1] = \\mathbb{E}[\\lambda_j + \\epsilon_{jt} \\mid d_{jt} = 1]\n\\]\nSince\\(\\lambda_j\\) is constant, the expected outcome simplifies to:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 1] = \\lambda_j + \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]\n\\]\nNow, we compute the difference in expected outcomes between the pre-treatment and post-treatment periods for the treated unit:\n\\[\n\\underbrace{\\mathbb{E}[y_{jt} \\mid d_{jt} = 1]}_{\\text{Post-Period}}-\\underbrace{\\mathbb{E}[y_{jt} \\mid d_{jt} = 0]}_{\\text{Pre-Period}}\n= \\left( \\lambda_j + \\underbrace{\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]}_{\\text{Post-Period}} \\right)\n- \\left( \\lambda_j + \\underbrace{\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]}_{\\text{Pre-Period}} \\right)\n\\]\nSince \\(\\lambda_j\\) is constant for both periods, it cancels out:\n\\[\n\\underbrace{\\mathbb{E}[y_{jt} \\mid d_{jt} = 1]}_{\\text{Post-Period}} -\n\\underbrace{\\mathbb{E}[y_{jt} \\mid d_{jt} = 0]}_{\\text{Pre-Period}}\n= \\underbrace{\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]}_{\\text{Post-Period}} -\n\\underbrace{\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]}_{\\text{Pre-Period}}\n\\]\nFor the pre-post t-test to be valid, we essentially must assume that the error terms \\(\\epsilon_{jt}\\) are independent and identically distributed between the pre-treatment and post-treatment periods. This means that any difference in outcomes between the pre-treatment and post-treatment periods should be solely due to the treatment effect, and not due to other unobserved factors.\nThe assumption is that the expected difference in error terms between the two periods is zero:\n\\[\n\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1] - \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0] = 0\n\\]\nThus, the difference in expected outcomes for the treated unit in the pre- and post-treatment periods simplifies to:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 1] - \\mathbb{E}[y_{jt} \\mid d_{jt} = 0] = 0\n\\]\nThis result implies that any observed difference in outcomes between the pre- and post-treatment periods is entirely due to the treatment effect, assuming no confounding or time-specific effects. This is before I even get into the fact that the t-test presumes that the observations are independent (they rarely if ever are in time series, basically).\nIn fairness, the authors do recognize these shortcomings, writing\n\nThe prices of tampons and the other consumer goods considered in this paper will be affected by numerous factors – the supply of raw materials, energy costs, and sheer random happenstance. It is therefore unsurprising that we see a large amount of month-to-month variation in prices; this makes it difficult to identify separate real trends from noise. More sophisticated statistical methods than a t-test are therefore not helpful (difference-in-difference and synthetic control methods were attempted, but did not produce meaningful results).\n\nI agree that there are plenty of confounding factors (mostly unobserved) and noise, but in situations like that, we use modern advances in econometrics to deal with these cases, instead of shoehorning a method to fit the data limitations.\n\n\n\n\n\n\n\n\n\n\n\n\n\n&lt;Figure size 1200x660 with 0 Axes&gt;\n\n\nAfter analysis."
  },
  {
    "objectID": "acene.html#data-generating-processes",
    "href": "acene.html#data-generating-processes",
    "title": "Data Science for Policy Analysts: On Importance of Data Generating Processes",
    "section": "",
    "text": "For DID, the DGP for the outcome \\(y_{jt}\\) is usually assumed to follow a two-way fixed effects model\n\\[\ny_{jt} = \\boldsymbol{\\lambda}_j^\\top \\boldsymbol{\\delta}_t + \\boldsymbol{\\epsilon}_{jt}\n\\]\nwhere we have \\(\\boldsymbol{\\lambda}_j = \\begin{bmatrix} a_j \\\\ 1 \\end{bmatrix} \\in \\mathbb{R}^2\\) represents the unit-specific fixed effects, with \\(a_j\\) being the fixed effect for unit \\(j\\) and \\(\\boldsymbol{\\delta}_t = \\begin{bmatrix} 1 \\\\ b_t \\end{bmatrix} \\in \\mathbb{R}^2\\) represents the time-specific fixed effects, with \\(b_t\\) being the fixed effect for time \\(t\\). This simplifies to the outcomes being generated by a simple additive unit effect and time effect. It does not permit heterogeneous effects. In practice, DID is estimated via the OLS speciofication \\(y_{1t}=\\hat\\alpha_{\\mathcal{N}_0}+ \\bar{y}_{\\mathcal{N}_0t} \\: t \\in \\mathcal{T}_1\\), where \\(\\bar{y}_{\\mathcal{N}_0t}\\coloneqq \\frac{1}{N_0} \\sum_{j \\in \\mathcal{N}_0} y_{jt}\\). The estimated least-squares intercept is computed like \\(\\hat\\alpha_{\\mathcal{N}_0} \\coloneqq T_{1}^{-1}\\sum_{t \\in \\mathcal{T}_{1}}\\left(y_{1t}-\\bar{y}_{\\mathcal{N}_0t}\\right)\\). What we take away from this setup is that we do not require the paths of the treated units and control group to be the same. We just require that they be parallel to each other in the pre-intervention period on the hopes that absent the treatment, they would evolve similarly absent treatment, with the additional assumption of no anticipation and SUTVA. We can even express this with expectations, as is usually done. Parallel trends requires that, in the absence of treatment ((d_jt = 0) for treated units), the difference in outcomes between the treated and control groups would follow a parallel trend. This can be expressed as:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_jt = 1] - \\mathbb{E}[y_{jt} \\mid d_jt = 0] = \\mathbb{E}[\\boldsymbol{\\lambda}_j^\\top \\boldsymbol{\\delta}_t] \\quad \\text{for all } t\n\\]\nAll we’re saying here is that the difference between our observed outcomes and our control group outcomes should be equvalent to the additive factor model we just specified. Now, we may substitute the scalar interpretation of this into this, giving us:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 1] = a_j + b_t + \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]\n\\] which is simply the factor model for the treated unit and \\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 0] = a_j + b_t + \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]\n\\] is the same for the control units. Thus, the difference between the treated and control groups’ expected outcomes, in the absence of treatment, should be:\n\\[\n\\mathbb{E}[y_{jt} \\mid D_j = 1] - \\mathbb{E}[y_{jt} \\mid D_j = 0] = \\left(a_j + b_t + \\mathbb{E}[\\epsilon_{jt} \\mid D_j = 1]\\right) - \\left(a_j + b_t + \\mathbb{E}[\\epsilon_{jt} \\mid D_j = 0]\\right)\n\\]\nNotice that the unit-specific fixed effect (a_j) and the time-specific fixed effect (b_t) cancel out, as they are the same for both treated and control groups. This leaves us with:\n\\[\n\\mathbb{E}[y_{jt} \\mid D_j = 1] - \\mathbb{E}[y_{jt} \\mid D_j = 0] = \\mathbb{E}[\\epsilon_{jt} \\mid D_j = 1] - \\mathbb{E}[\\epsilon_{jt} \\mid D_j = 0]\n\\]\nFor the parallel trends assumption to hold, this difference should be constant over time, implying that:\n\\[\n\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1] - \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0] = \\text{constant } \\forall \\, t\n\\]\nOr, that conditional only on some error term, the difference is constant with respect to both the treated and untreated groups.\n\n\n\nWe can do the exact same thing with the t-test too. In the pre-treatment period, the expected outcome for unit \\(j\\) is:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 0] = \\mathbb{E}[\\lambda_j + \\epsilon_{jt} \\mid d_{jt} = 0]\n\\]\nSince \\(\\lambda_j\\) is constant, the expected outcome simplifies to:\n\\[\n\\color{red}\\mathbb{E}[y_{jt} \\mid d_{jt} = 0] = \\lambda_j + \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]\n\\]\nSimilarly, in the post-treatment period, the expected outcome for unit \\(j\\) is:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 1] = \\mathbb{E}[\\lambda_j + \\epsilon_{jt} \\mid d_{jt} = 1]\n\\]\nSince\\(\\lambda_j\\) is constant, the expected outcome simplifies to:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 1] = \\lambda_j + \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]\n\\]\nNow, we compute the difference in expected outcomes between the pre-treatment and post-treatment periods for the treated unit:\n\\[\n\\underbrace{\\mathbb{E}[y_{jt} \\mid d_{jt} = 1]}_{\\text{Post-Period}}-\\underbrace{\\mathbb{E}[y_{jt} \\mid d_{jt} = 0]}_{\\text{Pre-Period}}\n= \\left( \\lambda_j + \\underbrace{\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]}_{\\text{Post-Period}} \\right)\n- \\left( \\lambda_j + \\underbrace{\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]}_{\\text{Pre-Period}} \\right)\n\\]\nSince \\(\\lambda_j\\) is constant for both periods, it cancels out:\n\\[\n\\underbrace{\\mathbb{E}[y_{jt} \\mid d_{jt} = 1]}_{\\text{Post-Period}} -\n\\underbrace{\\mathbb{E}[y_{jt} \\mid d_{jt} = 0]}_{\\text{Pre-Period}}\n= \\underbrace{\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1]}_{\\text{Post-Period}} -\n\\underbrace{\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0]}_{\\text{Pre-Period}}\n\\]\nFor the pre-post t-test to be valid, we essentially must assume that the error terms \\(\\epsilon_{jt}\\) are independent and identically distributed between the pre-treatment and post-treatment periods. This means that any difference in outcomes between the pre-treatment and post-treatment periods should be solely due to the treatment effect, and not due to other unobserved factors.\nThe assumption is that the expected difference in error terms between the two periods is zero:\n\\[\n\\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 1] - \\mathbb{E}[\\epsilon_{jt} \\mid d_{jt} = 0] = 0\n\\]\nThus, the difference in expected outcomes for the treated unit in the pre- and post-treatment periods simplifies to:\n\\[\n\\mathbb{E}[y_{jt} \\mid d_{jt} = 1] - \\mathbb{E}[y_{jt} \\mid d_{jt} = 0] = 0\n\\]\nThis result implies that any observed difference in outcomes between the pre- and post-treatment periods is entirely due to the treatment effect, assuming no confounding or time-specific effects. This is before I even get into the fact that the t-test presumes that the observations are independent (they rarely if ever are in time series, basically).\nIn fairness, the authors do recognize these shortcomings, writing\n\nThe prices of tampons and the other consumer goods considered in this paper will be affected by numerous factors – the supply of raw materials, energy costs, and sheer random happenstance. It is therefore unsurprising that we see a large amount of month-to-month variation in prices; this makes it difficult to identify separate real trends from noise. More sophisticated statistical methods than a t-test are therefore not helpful (difference-in-difference and synthetic control methods were attempted, but did not produce meaningful results).\n\nI agree that there are plenty of confounding factors (mostly unobserved) and noise, but in situations like that, we use modern advances in econometrics to deal with these cases, instead of shoehorning a method to fit the data limitations."
  },
  {
    "objectID": "acene.html#a-re-analysis-with-mlsynth",
    "href": "acene.html#a-re-analysis-with-mlsynth",
    "title": "Data Science for Policy Analysts: On Importance of Data Generating Processes",
    "section": "",
    "text": "&lt;Figure size 1200x660 with 0 Axes&gt;\n\n\nAfter analysis."
  },
  {
    "objectID": "clustsc.html",
    "href": "clustsc.html",
    "title": "On the Use of Clustering for Synthetic Controls",
    "section": "",
    "text": "Picking a donor pool is very important with the synthetic control method. The vanilla method suffers from interpolation biases in the case when the donor pool is not suitable for the target unit. This is farily common with applied SCM in real life, as oftentimes we may have a high-dimensional donor pool and not know what the right control units would be a priori. The standard advice given in this instance is to limit our control group to units that are already similar to the target unit. But how do we do this? One way is to use clustering methods to select the control group. Consider the classic Basque Country example below, where the Basque Country undergoes a wave of terrorism in the mid-1970s which is thought to impact their GDP per Capita relative to other areas of Spain.\nHere, we plot the Basque versus the average of its controls as well as the individual donor outcome vectors themselves. We can see that the Basque Country is one of the wealthiest areas of Spain, up there with Madrid, Cataluna, and the Balearic Islands. We have other donors too, which by comparison are less wealthy. The key, then, is to ask which donors we should select for the synthetic control algorithm to consider in the first place, by exploiting pre-intervention similarities between the treated unit and control group. With “better” pre-policy donors, there is a higher chance that our out-of-sample predictions would be closer to the actual counterfactual."
  },
  {
    "objectID": "clustsc.html#plotting-our-selected-donors",
    "href": "clustsc.html#plotting-our-selected-donors",
    "title": "On the Use of Clustering for Synthetic Controls",
    "section": "Plotting Our Selected Donors",
    "text": "Plotting Our Selected Donors\n\n\n\n\n\n\n\n\n\nHere we plot the Basque Country versus its selected donors. We can see that these donors (Cataluna, the very closest grey line in Euclidean distance to the Basque Country), Madrid, and the Balearic Islands are much more similar to the Basque Country than the other 13 control units. Both fPCA-clustering implemented in Mani’s dissertation and the clustering over the right singular vectors choose the same donor pool when the pretreatment period extends up to 1975."
  },
  {
    "objectID": "clustsc.html#takeaways-for-practitioners",
    "href": "clustsc.html#takeaways-for-practitioners",
    "title": "On the Use of Clustering for Synthetic Controls",
    "section": "Takeaways for Practitioners",
    "text": "Takeaways for Practitioners\nThe meaning of these results are quite simple: donor selection matters for SCM studies. In fact, simple machine-learning donor selection methods can oftentimes give the same or similar answers to classical studies which oftentimes used covariates (in the original SCM paper, Abadie and his advisor used 13 covariates to construct the counterfactual, returning Cataluna and Madrid as the weighted donors). I say oftentimes because these results are predicated on both assumptions and tuning parameters. We assume, for example, some low rank approximation exists that can fit the pre-intervention time series of the treated unit. The tuning parameters matter too– the lambda parameters control the sparisty of our results, for example. I use a simple herustic to tune it, but it may be more reasonable to use methods such as cross-validation to select the number of clusters or the values lambda should take, but this would demand simulation evidence.\nEither way, the main benefit for policy analysts is that these two methods offer ways to select a donor poor for synthetic control methods, on top of not needing to collect auxilary covariates that the original paper used to obtain very similar counterfactual predictions, and more work should be done on these estimators to see when and why they’d agree."
  },
  {
    "objectID": "gitact.html",
    "href": "gitact.html",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Github Actions",
    "section": "",
    "text": "Life is full of repititive actions and work in data science is no exception to this. Perhaps you must produce a plot of some form to clean a specific dataset/set of datasets each week, say revenue data or some such thing. Or perhaps, some files must be managed or cleaned, or a researcher wishes to collect the public housing data from Zillow each month when it updates. On one hand, we could physically do this ourselves, but this leaves us open to errors: for one, if we’re scraping a dataset from a website, what if the data are only there temporarily? What if it only exists for today, and then tomorrow it is updated with the then current data? What if we are away from our computers, and cannot be there to run script on our local machine? Surely, there must be a solution to this, and one such solution is Github Actions, which I learned about as an intern at Gainwell Technologies.\nThis post explains Github Actions in a very short, simple to intuit example. Of course, their applications are so vast that I cannot cover everything about them here, but they are still very useful to people who do a repetitive/very similar set of tasks over and over again."
  },
  {
    "objectID": "gitact.html#a-simple-yml-file",
    "href": "gitact.html#a-simple-yml-file",
    "title": "Data Science for Policy Analysts: A Simple Introduction to Github Actions",
    "section": "A Simple yml file",
    "text": "A Simple yml file\nname: City Level Gas Price Scraper\n\non:\n  schedule:\n    - cron: '30 9 * * *'\n  workflow_dispatch:\n\njobs:\n  scrape:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\n    - name: Run gas scraper\n      run: |\n        python \"City Scrape/cityscrape.py\"\n\n    - name: Ensure directory exists\n      run: |\n        mkdir -p \"City Scrape/Data/\"\n\n    - name: Commit and push updated CSV to repository\n      run: |\n        git config --global user.name \"GitHub Actions\"\n        git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n        \n        # Check if there are changes before committing\n        if git diff --quiet && git diff --staged --quiet; then\n          echo \"No changes detected, skipping commit.\"\n          exit 0\n        fi\n        \n        git add \"City Scrape/Data/City_*.csv\"\n        git commit -m \"Update gas prices data for $(date +'%Y-%m-%d')\"\n        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\nHere is a yml file we can find in my AAA repo. It begins by naming the action to be performed, which is to scrape some city level gas price data. It is scheduled to run at 9:30 UTC time, or at 4:30 each morning Eastern Standard Time, with the cron time. It may also run whenever I wish for it to run; alternatively, we can specify that some actions run on push to a repo, branch, or even a certain working directory.\nname: City Level Gas Price Scraper\n\non:\n  schedule:\n    - cron: '30 9 * * *'\n  workflow_dispatch:\nActions proceed by defining a set of jobs for the workflow to excecute. In this case, it’s just “scrape”, but you can define more jobs that are interdependent on one another. The job runs on a virtual computer, in this case Ubuntu. Jobs proceeds with a list of steps, or an order that the job proceeds in os the action can function. Step one is to checkout the repo, which essentially just clones the current repo on to the virtual machine.\njobs:\n  scrape:\n    runs-on: ubuntu-latest\n\n    steps:\n    - name: Check out repository\n      uses: actions/checkout@v3\n\nStep two here is to set up Python, since that’s the language I use, but I’m certain this may be done with R and other langauges (in fact, this entire blog is written in Quarto, which the action must install before working with each post). Note how we specify the version of Python here, too. We then install pip and the requirements that the Python code needs to run the scrape.\n    - name: Set up Python\n      uses: actions/setup-python@v4\n      with:\n        python-version: '3.9'\n\n    - name: Install dependencies\n      run: |\n        python -m pip install --upgrade pip\n        pip install -r requirements.txt\n\nNow, we simply run the code, which is no different practically speaking from running the code from our command line. Note that how the file is defined within a driectory, which must be specified if the python file is not at the root (different ways of doing this).\n\n    - name: Run gas scraper\n      run: |\n        python \"City Scrape/cityscrape.py\"\n\nNext, I make the directory for the data if it does not exist.\n\n    - name: Ensure directory exists\n      run: |\n        mkdir -p \"City Scrape/Data/\"\n\nAnd finally, we commit the csv file my code creates to the directory at the repo. We use the Github Actions bot to do the commit. If there are no changes between any of the files before and after committing, we don’t add them and then the job ends (this is what happens if I try to run the action after it’s ran already that day). If not, the files are pushed. In my case, the files are named things like City_2025-01-31.csv. These files are staged, or prepared for being committed, with the addition of the commit message that I’m updating the data for that day. Then we push them to the directory of interest, and then job complete.\n    - name: Commit and push updated CSV to repository\n      run: |\n        git config --global user.name \"GitHub Actions\"\n        git config --global user.email \"github-actions[bot]@users.noreply.github.com\"\n        \n        # Check if there are changes before committing\n        if git diff --quiet && git diff --staged --quiet; then\n          echo \"No changes detected, skipping commit.\"\n          exit 0\n        fi\n        \n        git add \"City Scrape/Data/City_*.csv\"\n        git commit -m \"Update gas prices data for $(date +'%Y-%m-%d')\"\n        git push https://x-access-token:${{ secrets.GITHUB_TOKEN }}@github.com/${{ github.repository }}.git HEAD:main\n      env:\n        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}\n\nThe real value of this is not the data I’m scraping (unless you’re a fuel economist/policy scholar). The value is that this job runs independent of my will. I do not have to be at my computer for this to run. I do not need to worry about whether my computer has power or whether I’m home to personally oversee it. The value here is that I’ve manually gotten my computer to do a specific task every single day, the correct way (assuming you’ve coded everything right!!!), every time. Of course, this job is so insignificant such that I did not feel the need to run additional safechecks (say AAA’s site is down, I could have the action restart in 6 hours, or have it curl the website on the hour until it does respond), but obviously you can do plenty more here if the task matters enough. This is also a very partial list of what may be done. You can also place lots of parameters around your actions that may make life easier, or employ pre-commit hooks which can do checks for the quality of the code and other tasks before anything is committed, which will fail if they are not satisfied.\nAlso, it’s worth noting that Actions may run in conjunction with cloud computing for larger-scale jobs. So, if you’re a policy researcher, and your org uses Github but not using Actions for all kinds of process automation tasks, these provide a very useful tool to handle repetitive actions that free up your time to do other things. After all, a key benefit of script is to automate the boring stuff, provided that we’ve automated our tasks correctly."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Here are my blog posts that cover causal inference, econometrics, machine learning, and other data science topics.\n\n\n\n\n\n\n\n\n\nArtificial Counterfactuals in Dense Settings: the \\(\\ell_2\\) relaxer\n\n\n\nCausal Inference\n\nEconometrics\n\n\n\n\n\n\nJan 24, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nData Science for Policy Analysts: A Simple Introduction to Web Scraping\n\n\n\nWeb Scraping\n\nPython\n\n\n\n\n\n\nJan 29, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nData Science for Policy Analysts: A Simple Introduction to Github Actions\n\n\n\nGithub\n\nAutomation\n\n\n\n\n\n\nJan 31, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nOn the Use of Clustering for Synthetic Controls\n\n\n\nCausal Inference\n\nMachine Learning\n\n\n\n\n\n\nFeb 3, 2025\n\n\nJared Greathouse\n\n\n\n\n\n\n\nData Science for Policy Analysts: On Importance of Data Generating Processes\n\n\n\nEconometrics\n\nCausal Inference\n\n\n\n\n\n\nFeb 14, 2025\n\n\nJared Greathouse\n\n\n\n\n\nNo matching items"
  },
  {
    "objectID": "scdense.html",
    "href": "scdense.html",
    "title": "Artificial Counterfactuals in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "",
    "text": "Plenty of posts have been done in the last decade on the synthetic control method and related approaches. It is a flavor of artificial counterfactual estimator for the panel data setting. Folks from Microsoft, Databricks, Uber, Amazon, Netflix, Gainwell Technologies, and elsewhere have written about/covered it, detailing its implementation, use cases, and econometric theory.\nMany (not all) of these cover the standard SCM, developed originally to study terrorism in the Basque Country and conduct comparative case studies more broadly. Standard SCM tends to favor, under certain technical conditions, a sparse set of control units being assigned weights. These weights aim to reconstruct the factor loadings/observed values of the treated unit, pre-intervention. Sparsity, or the true coefficient vector being mostly 0, has appealing properties; for example, a sparse vector allows us to interpret the synthetic control a lot easier, facilitating the estimation of leave-one-out placebos and other sensitivity checks. In some cases though, the sparsity notion is unfounded.\nThe the \\(\\ell_2\\) panel data approach is an econometric methodology developed by Zhentao Shi and Yishu Wang. The \\(\\ell_2\\)-PDA is a form of synthetic control estimation that accommodates sparse or dense data generation processes. A dense DGP is when the true vector of coefficients is mostly not zero. Sometimes, a sparse model is too simplistic, especially in settings where we have very many predictors. This is especially true when we have lots of multicollinearity among our predictors, which may be very plausible in settings with a lot of control units. The LASSO and the convex hull SCM (for different reasons and in different cases) generally struggle with this, whereas the Ridge or \\(\\ell_2\\)-PDA accomodate multicollinearity as a feature. In this post, I demonstrate the method as implemented in my library mlsynth. The Python code for these results may be found here."
  },
  {
    "objectID": "scdense.html#a-review-of-synthetic-controls",
    "href": "scdense.html#a-review-of-synthetic-controls",
    "title": "Artificial Counterfactuals in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "A Review of Synthetic Controls",
    "text": "A Review of Synthetic Controls\nLet \\(\\mathbb{R}\\) denote the set of real numbers. Denote the natural numbers and unit interval respectively as \\[\n\\mathbb{N} \\coloneqq \\{1, 2, 3, \\dots\\}, \\quad \\mathbb{I} \\coloneqq \\{ w \\in \\mathbb{R} : 0 \\leq w \\leq 1 \\}.\n\\] Let a caligraphic letter, say \\(\\mathcal A\\), denote a descrete set whose cardinality is \\(A=|\\mathcal{A}|\\). The sup norm of a vector \\(\\mathbf{y} \\in \\mathbb{R}^N\\) is defined as the maximum absolute value of its components, \\(\\|\\mathbf{y}\\|_\\infty = \\max_{j = 1, \\ldots, N} |y_j|\\). The floor function of a real number \\(x \\in \\mathbb{R}\\), denoted as \\(\\lfloor x \\rfloor\\), returns \\(\\lfloor x \\rfloor = \\max \\{k \\in \\mathbb{N} : k \\leq x\\}\\). Let \\(t \\in \\mathbb{N}\\) and \\(i \\in \\mathbb{N}\\), represent the indices for \\(T\\) time periods and \\(N\\) units. The pre-treatment period consists of consecutive time periods \\(\\mathcal{T}_1 = \\{1, 2, \\ldots, T_0\\}\\) (cardinality \\(T_1\\)), while the post-treatment period is given by \\(\\mathcal{T}_2 = \\{T_0 + 1, \\ldots, T\\}\\) (cardinality \\(T_2\\)). The treated unit is indexed by \\(i = 1\\), while the remaining set of units, \\(\\mathcal{N}_0 \\coloneqq \\{2, \\ldots, N_0 + 1\\}\\) (cardinality \\(N_0\\)), forms the control group. Each outcome for all units is denoted by \\(y_{it}\\). Denote the outcome vector for the treated unit as \\(\\mathbf{y}_1 \\coloneqq \\begin{bmatrix} y_{11} & y_{12} & \\cdots & y_{1T} \\end{bmatrix}^\\top \\in \\mathbb{R}^T\\), where each entry corresponds to the outcome of the treated unit at time \\(t\\). The donor pool matrix, similarly, is defined as\n\\[\n\\mathbf{Y}_0 = \\begin{bmatrix}\n    y_{21} & y_{22} & \\cdots & y_{2T} \\\\\n    y_{31} & y_{32} & \\cdots & y_{3T} \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    y_{(N_0+1)1} & y_{(N_0+1)2} & \\cdots & y_{(N_0+1)T}\n  \\end{bmatrix} \\in \\mathbb{R}^{N_0 \\times T}.\n\\]\nThe key challenge of causal inference is that we only observe the factual/realized outcome, expressed as:\n\\[\ny_{it} = y_{it}^1 d_{it} + \\left(1 - d_{it}\\right)y_{it}^0.\n\\] Outcomes in this framework are a function of treatment status, \\(d_{it} \\in \\{0, 1\\}\\). While \\(d_{it} = 1\\), a unit is treated and while \\(d_{it} = 0\\) a unit is untreated. Thus, \\(y_{it}^1\\) is the potential outcome under treatment, \\(y_{it}^0\\) is the counterfactual (or potential) outcome under no treatment. The objective is to estimate the counterfactual outcomes \\(y_{1t}^0\\). SCMs and panel data approaches are weighting based estimators. In this setup, some weight vector \\[\n\\mathbf{w} \\coloneqq \\begin{bmatrix} w_2 & w_3 & \\cdots & w_{N_0+1} \\end{bmatrix}^\\top, \\: \\text{where } w_i \\: \\forall \\: i \\in \\mathcal{N}_0.\n\\] is assigned across the \\(N_0\\) control units to approximate the treated unit’s pre-intervention outcome. SCM solves for \\(\\mathbf{w}\\) via the optimization:\n\\[\n\\underset{\\mathbf{w} \\in \\mathbb{I}^{N_0}}{\\operatorname*{argmin}} \\lVert \\mathbf{y}_1 - \\mathbf{w}^\\top \\mathbf{Y}_0 \\rVert_2^2,  \\: \\forall \\: t \\in \\mathcal{T}_{1}, \\: \\text{subject to } \\lVert \\mathbf{w} \\rVert_1 = 1.\n\\]\nHere, \\(\\mathbf{w}^\\top \\mathbf{Y}_0\\) represents the dot product of predictions, also known as a weighted average. The constraint of the convex hull disallows extrapolation of any form. SCMs are predicated on good pretreatment fit, such that \\(\\mathbf{w}^\\top \\mathbf{Y}_0 \\approx \\mathbf{y}_1\\). Speaking generally, the better pre-treatment fit we have over a long time series, the better the out-of-sample predictions will be for the synthetic control."
  },
  {
    "objectID": "scdense.html#selecting-tau",
    "href": "scdense.html#selecting-tau",
    "title": "Artificial Counterfactuals in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "Selecting \\(\\tau\\)",
    "text": "Selecting \\(\\tau\\)\nCritical to \\(\\ell_2\\)-PDA is the selection of tau. The reason for this is because while \\(\\tau \\to 0\\), the estimator converges to OLS, which we know will overfit to the pre-intervention data in most cases unless the data are exactly low-rank and fully observed. Too high a value of \\(\\tau\\) results in drastic underfitting (trust me) of the pre-treatment data. The way mlsynth tunes tau is by cross-validation over the pre-treatment period. mlsynth invokes a log-space over the interval \\(\\tau \\in \\left[ 10^{-4}, \\tau_{\\text{init}} \\right]\\), where \\(\\tau_{\\text{init}} = \\|\\boldsymbol{\\eta}\\|_\\infty\\). These correspond to the values of tau we supply. We first create a training and validation period, \\(\\mathcal{T}_1 = \\mathcal{T}_1^{\\text{train}} \\cup \\mathcal{T}_1^{\\text{val}}, \\quad\n\\mathcal{T}_1^{\\text{train}} \\cap \\mathcal{T}_1^{\\text{val}} = \\emptyset.\\) Denote the training series as \\(\\mathcal{T}_1^{\\text{train}} = \\{1, 2, \\ldots, k\\}\\). Denote the validation series as \\(\\mathcal{T}_1^{\\text{val}} = \\{k+1, \\ldots, T_0\\}\\), where \\(k = \\left\\lfloor \\frac{T_1}{2} \\right\\rfloor\\). We then estimate the model for the training period, and compute our predictions from \\(\\{k+1, \\ldots, T_0\\}\\). The tau we select is\n\\[\\begin{aligned}\n\\tau^{\\ast} = \\operatorname*{argmin}_{\\tau} \\left( \\frac{1}{|\\mathcal{T}_1^{\\text{val}}|} \\| \\mathbf{y}^{\\ell_2} - \\mathbf{y}_1 \\|_2^2 \\right),\n\\end{aligned}\\]\nor the one that minimizes the validation Root Mean Squared Error. The performance is pretty close to what Zhentao and Yishu do for their empirical example (see the code at the documentation). In the original paper, they do a 70-30 train test split over the pre-intervention period, where they take the first 70% of the pre-treatment data and supply some values of tau.\nOkay hard part done. Let’s apply this to a real-life example, shall we?"
  }
]