[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Posts",
    "section": "",
    "text": "Here are my blog posts that cover causal inference, econometrics, machine learning, and other data science topics.\n\nSynthetic Controls in Dense Settings: the \\(\\ell_2\\) relaxer"
  },
  {
    "objectID": "scdense.html",
    "href": "scdense.html",
    "title": "Synthetic Controls in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "",
    "text": "Plenty of posts have been done in the last decade on the synthetic control method and related approaches; folks from Microsoft, Databricks, Uber, Amazon, Netflix, Gainwell Technologies, and elsewhere have gone over it, detailing different aspects of the method. Many (not of course not all) of these go over the standard SCM. Broadly, the original SCM tends to favor, under certain technical conditions, a sparse set of control units being the underlying weights that reconstruct the factor loadings/observed values of the treated unit, pre-intervention. And while sparsity, or the true coefficient vector being mostly 0, has appealing properties (such as our ability to interpret the synthetic control), in some cases the sparsity notion is just wrong. The \\(\\ell_2\\) panel data approach is an econometric methodology developed by Zhentao Shi and Yishu Wang. The method accommodates sparse or dense data generation processes; here, a dense DGP is when the true vector of coefficients is mostly not zero. In this post, I demonstrate the \\(\\ell_2\\) panel data approach as implemented in my library mlsynth. The Python code for these results may be found here."
  },
  {
    "objectID": "scdense.html#ell_2-relaxation",
    "href": "scdense.html#ell_2-relaxation",
    "title": "Synthetic Controls in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "\\(\\ell_2\\) Relaxation",
    "text": "\\(\\ell_2\\) Relaxation\nThe \\(\\ell_2\\) relaxation estimates the model \\(\\mathbf{y}_1 = \\boldsymbol{\\alpha}+ \\mathbf{Y}_0\\mathbf{w}+\\mathbf{\\epsilon}\\), where \\(\\boldsymbol{\\alpha}\\) is some unconstrained intercept we estimate after solving for the weights. The main innovation with \\(\\ell_2\\) relaxation is the way Zhentao and Yishu propose to estimate the weights, which I think is pretty ingenious. They essentially advocate to literally exploit the pre-treatment relationships between the treated unit and donor pool, and the relationships between the donors themselves. Here is the optimization:\n\\[\\begin{split}\n\\begin{aligned}\n&\\min_{\\mathbf{w}} \\frac{1}{2} \\|\\mathbf{w}\\|_2^{2}, \\quad \\forall t \\in \\mathcal{T}_{1}, \\\\\n&\\text{subject to } \\|\\mathbf{\\eta} - \\mathbf{\\Sigma} \\mathbf{w}\\|_\\infty \\leq \\tau\n\\end{aligned}\n\\end{split}\\]\nUnderneath the scary matrix algebra, we have two terms to focus on here: eta (\\(\\boldsymbol{\\eta} \\in \\mathbb{R}^{N_0 \\times 1}=\\frac{1}{T_1} \\mathbf{Y}_0^\\top \\mathbf{y}_1\\)) and sigma (\\(\\boldsymbol{\\Sigma}\\in \\mathbb{R}^{N_0 \\times N_0} = \\frac{1}{T_1} \\mathbf{Y}_0^\\top \\mathbf{Y}_0\\)). The first term simply is a projection which measures the relation between treated unit and each of the control units. The greater the absolute value of the number, the more/less similar the donor is to the treated unit. The latter is the same, except for the control group, capturing how similar the control units are to each other. The optimization itself just finds the values of beta that bound the infinity norm (or, the maximum absolute value) of the difference between these two, such that the difference is below some constant, tau \\(\\tau\\). As for the weights themselves, they are shrank towards zero, but never actually equal 0. The weights may be any real number.\nCritical to this process is the selection of tau. In the original paper, the authors do a 70-30 train test split over the pre-intervention period, where they take the first 70% of the pre-treatment data and supply some values of tau. Then, the next step is to estimate the regression model run the optimization and calculate out-of-sample validation predictions up until time point \\(T_0\\). We then check the RMSE of the validation error across all these values of tau and select the value of with the lowest validation RMSE. A lower tau corresponds to an estimator closer to pure least squares, and too high a value of tau results in drastic underfitting (trust me). The way mlsynth does this, however, is by splitting the pre-treatment period in half, but the performance is pretty close to what Zhentao and Yishu do for their empirical example (see the code at the documentation).\n\\(\\ell_2\\) relaxation offers a counterfactual prediction for dense settings. Oftentimes, a sparse model is too simplistic, especially in settings where we have very many predictors. This is especially true when we have lots of multicollinearity among our predictors (our donor pool in this case), which may be very plausible in settings with a lot of control units. The LASSO and the convex hull SCM generally struggle with this, whereas the Ridge or \\(\\ell_2\\)-relaxer accomodate multicollinearity as a feature. Okay, now with that out of the way, let’s apply this to two real-life empirical examples, shall we?"
  },
  {
    "objectID": "scdense.html#plotting-our-data",
    "href": "scdense.html#plotting-our-data",
    "title": "Synthetic Controls in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "Plotting Our Data",
    "text": "Plotting Our Data\n\nNote:\nThese data are freely available from my Github and can be viewed at a dashboard on Streamlit. They were scraped together using Python- the code for this scrape is private though. Someday, I may do a blog post employing a simple example of how I scraped it together, since public policy scholars can take advantage of scraping for their own purposes.\n\nBefore we get into the fancy estimation though, let’s just plot our data. These daily data come from Songstats, a platform which keeps data on Spotify and Apple (and lots of other sources) music/interaction trends. For example, here is Tyla’s Apple performance and the same for Spotify. For Spotify, the metric is “Playlist Reach” which Songstats defines as\n\nThe combined follower number of all Spotify playlists with 200+ followers your music is currently on.\n\nI keep the data from Janaury 1 2023 to June 1 2024. There are 59 donors in the Spotify data, after we drop artists with unbalanced panel/missing data. For Apple, our metric is “Playlists”, which Songstats defines as\n\nThe total number of distinct playlists your music has ever been on.\n\nThese data are collected from January 1 of 2022 to June 1 2024. Also, not all artists had complete data, so I kept only the artist who were fully observed over the course of the time series. This means there are 24 donors for Apple, yet this could easily change assuming I began the training period with the same time point as the Spotify data.\n\n\n\n\n\n\n\n\n\nI normalized all the metrics to 100 at August 17, 2023, a few days before the treatment occured (Tyla performing in Kigali, Rwanda). Zhentao and Yishu recommend mean-standardization and then backing out the coefficients in the paper, but I haven’t programmed this for the \\(\\ell_2\\) PDA just yet. Either way, I think it helps us to see what’s going on in better detail when we normalize the outcome trends as we see here, since now we’re practically comparing everybody in terms of relative trends. The plot says that Tyla generally had less relative popularity compared to the donors for the majority of the time seies pre treatment. We can see both her metrics balloon in the post-intervention period. We can also see quite clearly that parallel trends with respect to the donor pool likely does not hold; the trend of the average of controls is quite flat relatve to Tyla’s.\n\nSongstats Spotify\nI begin with the Spotify data. When we estimate the \\(\\ell_2\\) relaxer, comparing Tyla to her 59 controls, we get the following plot (note the red line is the counterfactual Tyla, or how her Playlist Reach would look absent her going viral) :\n\n\n/opt/hostedtoolcache/Python/3.10.16/x64/lib/python3.10/site-packages/cvxpy/problems/problem.py:1481: UserWarning: Solution may be inaccurate. Try another solver, adjusting the solver settings, or solve with verbose=True for more information.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\n|    | Metric              | Value                                                            |\n|---:|:--------------------|:-----------------------------------------------------------------|\n|  0 | ATT                 | 1325.835                                                         |\n|  1 | Standard Error      | 76.59708007821426                                                |\n|  2 | t-stat              | 294.25658232644037                                               |\n|  3 | Confidence Interval | (np.float64(1175.0739327938988), np.float64(1476.5960672061012)) |\n|  4 | RMSE (T0)           | 5.226                                                            |\n|  5 | R-Squared           | 0.978                                                            |\n\n\n&lt;Figure size 1000x550 with 0 Axes&gt;\n\n\n\n\nSongstats Apple\nHere is the same plot with the Apple data, where the outcome is Playlist Count:\n\n\n\n\n\n\n\n\n\n|    | Metric              | Value                                                           |\n|---:|:--------------------|:----------------------------------------------------------------|\n|  0 | ATT                 | 412.589                                                         |\n|  1 | Standard Error      | 22.423240653018407                                              |\n|  2 | t-stat              | 312.80104015901196                                              |\n|  3 | Confidence Interval | (np.float64(368.4547890403085), np.float64(456.72321095969147)) |\n|  4 | RMSE (T0)           | 4.343                                                           |\n|  5 | R-Squared           | 0.982                                                           |\n\n\n&lt;Figure size 1000x550 with 0 Axes&gt;\n\n\nThis is unsurprising, and the practical results speak for themselves. Going viral clearly contributed a lot to Tyla’s success across both platforms, as the estimated counterfactuals spell out very plainly that her reach would be a lot flatter compared to what it in fact was/is. As we know from the above, every artist in the donor pool contributes to Tyla’s synthetic control, and the \\(\\ell_2\\) relaxer will not run ito problems of multicollinearity as LASSO might in higher dimensions. This method can also be used with multiple treated units, but I haven’t written this just yet."
  },
  {
    "objectID": "scdense.html#a-review-of-synthetic-controls",
    "href": "scdense.html#a-review-of-synthetic-controls",
    "title": "Synthetic Controls in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "A Review of Synthetic Controls",
    "text": "A Review of Synthetic Controls\nLet \\(\\mathbb{R}\\) denote the set of real numbers. Furthermore, let \\(\\mathbb{N}\\) be the set of natural numbers and \\(\\mathbb{I}\\) the unit interval, where\n\\[\n\\mathbb{N} \\coloneqq \\{1, 2, 3, \\dots\\}, \\quad \\mathbb{I} \\coloneqq \\{ w \\in \\mathbb{R} : 0 \\leq w \\leq 1 \\}.\n\\] Let a caligraphic letter, say \\(\\mathcal A\\), denote a descrete set whose cardinality is \\(A=|\\mathcal{A}|\\). Let \\(t \\in \\mathbb{N}\\) and \\(i \\in \\mathbb{N}\\), represent the indices for \\(T\\) time periods and \\(N\\) units. The pre-treatment period consists of consecutive time periods \\(\\mathcal{T}_1 = \\{1, 2, \\ldots, T_0\\}\\) (cardinality \\(T_1\\)), while the post-treatment period is given by \\(\\mathcal{T}_2 = \\{T_0 + 1, \\ldots, T\\}\\) (cardinality \\(T_2\\)). The treated unit is indexed by \\(i = 1\\), while the remaining set of units, \\(\\mathcal{N}_0 \\coloneqq \\{2, \\ldots, N_0 + 1\\}\\) (cardinality \\(N_0\\)), forms the control group. Each outcome for all units is denoted by \\(y_{it}\\). Denote the outcome vector for the treated unit as \\(\\mathbf{y}_1 \\coloneqq \\begin{bmatrix} y_{11} & y_{12} & \\cdots & y_{1T} \\end{bmatrix}^\\top \\in \\mathbb{R}^T\\), where each entry corresponds to the outcome of the treated unit at time \\(t\\). The donor pool matrix, similarly, is defined as\n\\[\n\\mathbf{Y}_0 = \\begin{bmatrix}\n    y_{21} & y_{22} & \\cdots & y_{2T} \\\\\n    y_{31} & y_{32} & \\cdots & y_{3T} \\\\\n    \\vdots & \\vdots & \\ddots & \\vdots \\\\\n    y_{(N_0+1)1} & y_{(N_0+1)2} & \\cdots & y_{(N_0+1)T}\n  \\end{bmatrix} \\in \\mathbb{R}^{N_0 \\times T}.\n\\]\nThe key challenge of causal inference is that we only observe the factual/realized outcome, expressed as:\n\\[\ny_{it} = y_{it}^1 d_{it} + \\left(1 - d_{it}\\right)y_{it}^0.\n\\] Outcomes in this framework are a function of treatment status, \\(d_{it} \\in \\{0, 1\\}\\). While \\(d_{it} = 1\\), a unit is treated and while \\(d_{it} = 0\\) a unit is untreated. Thus, \\(y_{it}^1\\) is the potential outcome under treatment, \\(y_{it}^0\\) is the counterfactual (or potential) outcome under no treatment. The objective is to estimate the counterfactual outcomes \\(y_{1t}^0\\). SCMs and panel data approaches are weighting based estimators. In this setup, some weight vector \\(\\mathbf{w}\\) is assigned across the \\(N_0\\) control units to approximate the treated unit’s pre-intervention outcome\n\\[\n\\mathbf{w} = \\begin{bmatrix} w_2 & w_3 & \\cdots & w_{N_0+1} \\end{bmatrix}^\\top,\n\\]\nwhere \\(w_i\\) represents the weight assigned for control unit \\(i\\). SCM solves for $ via the optimization:\n\\[\n\\underset{\\mathbf{w} \\in \\mathbb{I}^{N_0}}{\\operatorname*{argmin}} \\lVert \\mathbf{y}_1 - \\mathbf{w}^\\top \\mathbf{Y}_0 \\rVert_2^2, \\quad \\text{subject to } \\lVert \\mathbf{w} \\rVert_1 = 1.\n\\]\nHere, \\(\\mathbf{w}^\\top \\mathbf{Y}_0\\) represents the predictions, which constrain the weights to the convex hull, disallowing extrapolation of any form. The objective of SCM is to achieve a good pre-treatment fit, such that \\(\\mathbf{w}^\\top \\mathbf{Y}_0 \\approx \\mathbf{y}_1\\). The better pre-treatment fit we have, the better our out-of-sample predictions will be for the synthetic control."
  },
  {
    "objectID": "scdense.html#implementing-ell_2-relaxation-in-mlsynth.",
    "href": "scdense.html#implementing-ell_2-relaxation-in-mlsynth.",
    "title": "Synthetic Controls in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "Implementing \\(\\ell_2\\) relaxation in mlsynth.",
    "text": "Implementing \\(\\ell_2\\) relaxation in mlsynth.\nIn order to get these results, you need Python (3.8 or greater) and mlsynth, which you may install from the Github repo.\n$ pip install -U git+https://github.com/jgreathouse9/mlsynth.git\nI taught Policy Data Analysis last semester at Georgia State. It was an undergrad course, but I still wanted to cover a little bit of causal infernece, not because they will all go on to be grad students or policy researchers, but because the causal mindset is such an important part of how we think about and interact with the world. We managed to get through Difference-in-Differences, after we covered regression and basic stats. The very final topic we covered on the very last day of class was SCM. I prepared for class as I usually do, by playing music. The lyics were in Zulu, so I did not expect anybody who was not South African or a fan of Tyla to know the song, which they did not when I asked them. I then played Tyla’s song “Water”, the one that went viral in 2023, which everybody knew about when I asked.\nI used this to transition into the lecture for the day. “Oftentimes,” I began, “we are concerned about the impact of specific events or interventions. As we’ve discussed, the DID method does this on a parallel trends assumption, or that absent the intevention, the trends of the treated group would, on average, move the same as the control group. But what do we do if this breaks down? What if we cannot get parallel trends to hold, for some reason? All semester, we’ve discussed academic examples, but I want to show you how this may look in a semi-real life setting. So the question we wish to answer here is”How would Tyla’s musical success have looked absent her going viral?” Maybe she would’ve made it big anyways, but how can we tell?”\n\nPlotting Our Data\n\nNote:\nThese data are freely available from my Github and can be viewed at a dashboard on Streamlit. They were scraped together using Python- the code for this scrape is private though. Someday, I may do a blog post employing a simple example of how I scraped it together, since public policy scholars can take advantage of scraping for their own purposes.\n\nBefore we get into the fancy estimation though, let’s just plot our data. These daily data come from Songstats, a platform which keeps data on Spotify and Apple (and lots of other sources) music/interaction trends. For example, here is Tyla’s Apple performance and the same for Spotify. For Spotify, the metric is “Playlist Reach” which Songstats defines as\n\nThe combined follower number of all Spotify playlists with 200+ followers your music is currently on.\n\nI keep the data from Janaury 1 2023 to June 1 2024. There are 59 donors in the Spotify data, after we drop artists with unbalanced panel/missing data. For Apple, our metric is “Playlists”, which Songstats defines as\n\nThe total number of distinct playlists your music has ever been on.\n\nThese data are collected from January 1 of 2022 to June 1 2024. Also, not all artists had complete data, so I kept only the artist who were fully observed over the course of the time series. This means there are 24 donors for Apple, yet this could easily change assuming I began the training period with the same time point as the Spotify data.\n\n\n\n\n\n\n\n\n\nI normalized all the metrics to 100 at August 17, 2023, a few days before the treatment occured (Tyla performing in Kigali, Rwanda). Zhentao and Yishu recommend mean-standardization and then backing out the coefficients in the paper, but I haven’t programmed this for the \\(\\ell_2\\) PDA just yet. Either way, I think it helps us to see what’s going on in better detail when we normalize the outcome trends as we see here, since now we’re practically comparing everybody in terms of relative trends. The plot says that Tyla generally had less relative popularity compared to the donors for the majority of the time seies pre treatment. We can see both her metrics balloon in the post-intervention period. We can also see quite clearly that parallel trends with respect to the donor pool likely does not hold; the trend of the average of controls is quite flat relatve to Tyla’s.\n\n\nSongstats Spotify\nI begin with the Spotify data. When we estimate the \\(\\ell_2\\) relaxer, comparing Tyla to her 59 controls, we get the following plot (note the red line is the counterfactual Tyla, or how her Playlist Reach would look absent her going viral) :\n\n\n/opt/hostedtoolcache/Python/3.10.16/x64/lib/python3.10/site-packages/cvxpy/problems/problem.py:1481: UserWarning: Solution may be inaccurate. Try another solver, adjusting the solver settings, or solve with verbose=True for more information.\n  warnings.warn(\n\n\n\n\n\n\n\n\n\n|    | Metric              | Value                                                            |\n|---:|:--------------------|:-----------------------------------------------------------------|\n|  0 | ATT                 | 1325.835                                                         |\n|  1 | Standard Error      | 76.59708007821426                                                |\n|  2 | t-stat              | 294.25658232644037                                               |\n|  3 | Confidence Interval | (np.float64(1175.0739327938988), np.float64(1476.5960672061012)) |\n|  4 | RMSE (T0)           | 5.226                                                            |\n|  5 | R-Squared           | 0.978                                                            |\n\n\n&lt;Figure size 1000x550 with 0 Axes&gt;\n\n\n\n\nSongstats Apple\nHere is the same plot with the Apple data, where the outcome is Playlist Count:\n\n\n\n\n\n\n\n\n\n|    | Metric              | Value                                                           |\n|---:|:--------------------|:----------------------------------------------------------------|\n|  0 | ATT                 | 412.589                                                         |\n|  1 | Standard Error      | 22.423240653018407                                              |\n|  2 | t-stat              | 312.80104015901196                                              |\n|  3 | Confidence Interval | (np.float64(368.4547890403085), np.float64(456.72321095969147)) |\n|  4 | RMSE (T0)           | 4.343                                                           |\n|  5 | R-Squared           | 0.982                                                           |\n\n\n&lt;Figure size 1000x550 with 0 Axes&gt;\n\n\nThis is unsurprising, and the practical results speak for themselves. Going viral clearly contributed a lot to Tyla’s success across both platforms, as the estimated counterfactuals spell out very plainly that her reach would be a lot flatter compared to what it in fact was/is. This method can also be used with multiple treated units, as we see in the paper, but I haven’t written this for mlsynth just yet."
  },
  {
    "objectID": "scdense.html#selecting-tau",
    "href": "scdense.html#selecting-tau",
    "title": "Synthetic Controls in Dense Settings: the \\(\\ell_2\\) relaxer",
    "section": "Selecting \\(\\tau\\)",
    "text": "Selecting \\(\\tau\\)\nCritical to \\(\\ell_2\\) relaxation is the selection of tau. The reason for this is because 0 lower tau corresponds to an estimator closer to pure least squares, and too high a value of tau results in drastic underfitting (trust me) of the pre-treatment data. The way mlsynth tunes tau is by cross-validation. mlsynth invokes a log-space over the interval \\(\\tau \\in \\left[ 10^{-4}, \\tau_{\\text{init}} \\right]\\), where $ { = ||$. We begin by dividing the pre-treatment period into a training and validation period, \\(\\mathcal{T}_1 = \\mathcal{T}_1^{\\text{train}} \\cup \\mathcal{T}_1^{\\text{val}}, \\quad\n\\mathcal{T}_1^{\\text{train}} \\cap \\mathcal{T}_1^{\\text{val}} = \\emptyset.\\) Let the final training period be \\(k = \\left\\lfloor \\frac{T_1}{2} \\right\\rfloor\\), or the halfway point of the pre-treatment time series, such that \\(\\mathcal{T}_1^{\\text{train}} = \\{1, 2, \\ldots, k\\}, \\quad\n\\mathcal{T}_1^{\\text{val}} = \\{k+1, \\ldots, T_0\\}.\\) We then estimate the model for the training peirod, and estimate our predictions through the end of the validation period. The tau we select is\n\\[\\begin{aligned}\n\\tau^{\\ast} = \\operatorname*{argmin}_{\\tau} \\left( \\frac{1}{|\\mathcal{T}_1^{\\text{val}}|} \\| \\mathbf{y}^{\\ell_2} - \\mathbf{y}_1 \\|_2^2 \\right),\n\\end{aligned}\\]\nor the one that minimizes the validation error for the lattter 50 percent of the pre-treatment data. The performance is pretty close to what Zhentao and Yishu do for their empirical example (see the code at the documentation). In the original paper, they do a 70-30 train test split over the pre-intervention period, where they take the first 70% of the pre-treatment data and supply some values of tau.\n\\(\\ell_2\\) relaxation offers a counterfactual prediction for dense settings. Oftentimes, a sparse model is too simplistic, especially in settings where we have very many predictors. This is especially true when we have lots of multicollinearity among our predictors (our donor pool in this case), which may be very plausible in settings with a lot of control units. The LASSO and the convex hull SCM generally struggle with this, whereas the Ridge or \\(\\ell_2\\)-relaxer accomodate multicollinearity as a feature. Okay, now with that out of the way, let’s apply this to two real-life empirical examples, shall we?"
  }
]