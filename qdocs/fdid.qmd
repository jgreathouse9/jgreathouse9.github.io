---
title: 'Forward Difference-in-Differences'
date: 2025-02-24
categories: [Causal Inference, Machine Learning, Econometrics]
---

Causal inference is critical to economics, marketing, policy, real estate, and other sectors of industry. Frequently, policies or natural events occur that may affect metrics we care about. In order to maximize our decision making capabilities, understanding the effects of these events we care about is critical so that businseses and governments may plan future business decisions better or know if a policy intervention achieves its intended aims. In absence of A/B tests (randomized controlled trials, which is quite popular amongst marketing firms/other areas of tech), business scientists and policy analysts frequently resort to constructing counterfactuals to infer treatment effecs.

Difference-in-Differences (DID) is one of the most popular methods for quasi-experimental designs/treatment effect analysis. DID is simple to compute, and is valid even in settings where we have one treated unit and a single control unit. The key identifying assumption of DID is  parallel trends (PTA), or that the trend of the treated group would be constant with respect to the control group had a given intervention or policy never took place. Additionally, PTA posits no-anticipation of the intervention. [Various restatements](https://doi.org/10.1086/711509) of PTA are common in the econometrics literature,  especially under staggered adoption where DID is frequently applied to use cases researchers care about. However, sometimes DID is used even in settings of [a single treated unit](https://doi.org/10.1111/jels.12188). And in these settings, PTA may be less likely to hold. This blog post goes over [the Forward DID method](https://mlsynth.readthedocs.io/en/latest/fdid.html) with an application to the construction/tourism industry.

# Barcelona's Ban on Hotel Construction

Overtourism is an important problem for cities the globe over. Often, a major complaint about massive tourism based economies is that many of the inhabitants may feel they [have no neighbors](https://www.theguardian.com/news/2025/jan/25/no-neighbours-overtourism-residents-spain-portugal-visitor). In response to such complaints, cities such as [Venice, Florence, and Rome](https://uk.style.yahoo.com/florence-rome-venice-italian-cities-153523897.html?) have enacted or will enact taxes on visitors, or that [Amsterdam](https://www.nytimes.com/2024/04/18/world/europe/amsterdam-tourism-hotel-stop.html) and even places like [Miami Beach](https://www.miamitodaynews.com/2024/01/02/tourist-mecca-miami-beach-weighs-a-hotels-moratorium/) have or have considerd enacting a moratorium on new hotel construction. A key question then, for the hotel inndustry, would be "how might this impact demand or the prices of hotel rooms". For the bigger construction industry, depending on how important hotel construction is to the local economy, one may ask how these policies would affect put in place value, or the total amount built each month.

In July 2015, Barcelona [enacted a hotel moratorium](https://www.hotelmanagement.net/development/investor-appeal-to-continue-despite-barcelona-hotel-performance-declines) which stopped the building of new hotels. The effect this measure had on the normalized prices of hotel rooms was studied in [an academic paper](https://doi.org/10.1080/13504851.2021.1927958). This paper used the synthetic control method, finding a 16 point index increase in the price of hotel rooms. I use their data to demonstrate the Forward DID method.

# Parallel Trends

Let units be indexed by $i$ and time by $t$. Let $\mathcal{N}$ be the set of all units and $\mathcal{U}$ be some subset of $\mathcal{N}$. For our purposes, $i = 0$ denotes the treated unit, and $i \in \mathcal{N} \setminus {0}$ denotes the control group. Parallel trends for Difference-in-Differences (DID) can be formalized as:

$$
\mathbb{E}[y_{0t}(0) \mid \mathcal{N}] - \mathbb{E}[y_{\mathcal{N}t}(0) \mid \mathcal{N}] = \mathbb{E}[y_{1,t-1}(0) \mid \mathcal{N}] - \mathbb{E}[y_{\mathcal{N},t-1}(0) \mid \mathcal{N}] = \alpha_{\mathcal{N}t}, \quad t = 2, \dots, T
$$

This is the difference between the treated unit, $y_{0t}$, and the average of the control group, $y_{\mathcal{N}t}$. If parallel trends hold perfectly, this difference would be constant at every time point in the time series. The degree to which this does not hold represents the bias due to violations of parallel trends. Algebraically, we can model this as:

$$
y_{0t} = \alpha_{\mathcal{N}t} + \bar{y}_{\mathcal{N}t}
$$

where $\bar{y}_{\mathcal{N}t} = \frac{1}{|\mathcal{N}|} \sum_{i \in \mathcal{N}} y_{it}$. Here, we know the control group average, so we are estimating only a single parameter, the baseline difference, $\alpha_{\mathcal{N}t}$. This is equivalent to the regression model used in synthetic control, except that the weights for the control units are proportional to the cardinality of the control group.

With Forward DID, our Parallel Trends Assumption (PTA) is that a subset of these units will better satisfy parallel trends:

$$
\mathbb{E}[y_{0t}(0) \mid \mathcal{U}] - \mathbb{E}[y_{\mathcal{U}t}(0) \mid \mathcal{U}] = \mathbb{E}[y_{1,t-1}(0) \mid \mathcal{U}] - \mathbb{E}[y_{\mathcal{U},t-1}(0) \mid \mathcal{U}] = \alpha_{\mathcal{U}t}, \quad t = 2, \dots, T
$$

Our regression estimator is almost identical to the one above:

$$
y_{0t} = \alpha_{\mathcal{U}t} + \bar{y}_{\mathcal{U}t}
$$

Here, $\bar{y}_{\mathcal{U}t}$ corresponds to the average of the subset of selected controls:

$$
\bar{y}_{\mathcal{U}t} = \frac{1}{|\mathcal{U}|} \sum_{i \in \mathcal{U}} y_{it}.
$$

## Testing Parallel Trends

One thing we can do to test parallel trends is to plot the average of control versus the treated unit (in this case, we have block assignment, so we need not worry about staggered adoption).

```{python}
#| echo: false
#| fig-align: center

import pandas as pd
import matplotlib.pyplot as plt
import matplotlib
from mlsynth.mlsynth import FDID
from mlsynth.mlsynth import dataprep
import numpy as np

andy_theme = {'axes.grid': True,
              'grid.linestyle': '-',
              'legend.framealpha': 1,
              'legend.facecolor': 'white',
              'legend.shadow': True,
              'legend.fontsize': 14,
              'legend.title_fontsize': 16,
              'xtick.labelsize': 14,
              'ytick.labelsize': 14,
              'axes.labelsize': 16,
              'axes.titlesize': 20,
              'figure.dpi': 100}

matplotlib.rcParams.update(andy_theme)

# Load the data into a DataFrame
data = 'https://raw.githubusercontent.com/jgreathouse9/GSUmetricspolicy/refs/heads/main/data/RawData/HotelPricesRaw.csv'
df = pd.read_csv(data, delimiter=',', thousands='.', decimal=',')
df.columns = df.columns.str.lower()

# Convert 'yyyy_mm_dd' column to datetime
df['yrweek'] = pd.to_datetime(df['yyyy_mm_dd'])

# Extract year and week number
df['year'] = df['yrweek'].dt.year
df['week'] = df['yrweek'].dt.isocalendar().week

# Create a proper weekly date (Monday of the given week)
df['yrweek'] = pd.to_datetime(df['year'].astype(str) + df['week'].astype(str) + '1', format='%G%V%u')


drop_date = pd.to_datetime('2017-08-21')
df = df[df['yrweek'] <= drop_date]

df['id'] = df.groupby(['city_id']).ngroup()

df["name"] = 'Donor'

df['fullname'] = df['name'].map(str) + ' ' + df['id'].map(str)

df.loc[df["is_barcelona"] == 1, "fullname"] = "Barcelona"


# Calculate the average of indexed_price by id and yrweek
df = df.groupby(['id', 'yrweek', 'fullname', 'mediterranean'])[
    'indexed_price'].mean().reset_index()

df = df.sort_values(by=['id', 'yrweek'])

# Define the reference week (2015-W27, which starts on July 6, 2015)
moratorium_start = pd.to_datetime("2015-07-06")

# Create the 'Moratorium' indicator
df['Moratorium'] = ((df['fullname'] == "Barcelona") & (df['yrweek'] > moratorium_start)).astype(int)

df.rename(columns={'indexed_price': 'Hotel Prices', 'yrweek': "Date"}, inplace=True)

treat = "Moratorium"
outcome = "Hotel Prices"
unitid = "fullname"
time = "Date"

prepdict = dataprep(df, unitid, time, outcome, treat)

Nmean = np.mean(prepdict["donor_matrix"],axis=1)

y = prepdict["y"]

plt.figure(figsize=(10, 6))
# Extract the dates from Ywide's index
time_index = prepdict["Ywide"].index

plt.axvline(x=time_index[prepdict["pre_periods"] - 1], color="blue", linestyle="--", linewidth=2, label="Moratorium Date")


# Plot control average in red
plt.plot(time_index, Nmean, color="red", linewidth=2, label="Control Avg")

# Plot treated unit in black
plt.plot(time_index, y, color="black", linewidth=2, label="Treated Unit")

# Format x-axis labels
plt.xticks(rotation=45)
plt.xlabel("Date")
plt.ylabel("Hotel Prices")
plt.legend()
plt.show()
```

This is the hotel prices of Barcelona (averaged over the week) compared to the average of control units.

